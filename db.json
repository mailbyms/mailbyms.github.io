{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ApachKafka实战笔记.md","hash":"c12b3a60d62e047d6256120f2ecb06b42d28b98a","modified":1627615300115},{"_id":"source/_posts/Sonar-iOS扫描.md","hash":"98769ed80d9e28d04632a487205f179d62b79008","modified":1627617670089},{"_id":"source/_posts/canal-adapter配置.md","hash":"974c244f87036bf65a5ecc346b550cf637f358fc","modified":1627615292849},{"_id":"source/_posts/mall4j部署说明.md","hash":"a6dd16a6d6269f29003f2c685c7f12cbaa2ad308","modified":1627615246505},{"_id":"source/_posts/南海云课堂阿里云资源规格.md","hash":"0edcd880a3b0ddcd395f5e8341b7360eae873bd6","modified":1627615428823},{"_id":"source/_posts/备份OSS视频文件.md","hash":"dc7bba20d0146ee83c47bcef02c7cabeaa710ecd","modified":1627615758661},{"_id":"source/_posts/备份数据库.md","hash":"eda00aa6779d485958aa35b37ab02a964243df82","modified":1627615410364},{"_id":"source/_posts/开发规范.md","hash":"53f72cfcfe4ff9eed2194dffb29a9bb77d280eff","modified":1627615346537},{"_id":"source/_posts/清除OSS多余mp4文件.md","hash":"3413bad38ea17196122a11ac2906fbf48b74f95a","modified":1627615439868},{"_id":"source/_posts/部署规范v1.0.md","hash":"4d28dbeaa457f496d6569d5166b5dd844cff059f","modified":1627615377958},{"_id":"source/_posts/项目部署要求.md","hash":"b4023e6807d4193cd4e43ae74993e376177c7b57","modified":1627615364652},{"_id":"source/categories/index.md","hash":"218504cf77044f337545c8b8b904ff911ff73f59","modified":1627612549870},{"_id":"source/tags/index.md","hash":"e09303180a19a10ac7565bcf4d01a3c1913c915b","modified":1627612505303},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"8c9940a3dbe2c7a0cb4f6e18d7ee9df40a71c140","modified":1627621447343},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"d23f5602cca57b035a2c8016e34f729d304d0b12","modified":1627612253549},{"_id":"node_modules/hexo-theme-butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1627621191369},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"54b9324e3506dcc9c9991ef5e11e37e66e21594f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"98235fcda3b87ad6f7e91eafbed94d0d6ae847ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"97fec1e814f88237862f4d800a35362b802f6625","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":499162500000},{"_id":"public/categories/index.html","hash":"5cf5feea14d22f42f81bc21e551b1dbc449f89ae","modified":1627621455341},{"_id":"public/tags/index.html","hash":"042a571956d5feb03ddb6fddb1aed953439f4b57","modified":1627621455341},{"_id":"public/2021/07/29/mall4j部署说明/index.html","hash":"8cc65d47ae3d675e15917262f8b802a8e5187353","modified":1627621455341},{"_id":"public/2021/06/07/ApachKafka实战笔记/index.html","hash":"f1cff9c0a442d916c4246b1b2959227555b5f8df","modified":1627621455341},{"_id":"public/2021/05/26/Sonar-iOS扫描/index.html","hash":"7343456a80302e12a1026ee161f185dfe7812cc5","modified":1627621455341},{"_id":"public/2021/05/21/项目部署要求/index.html","hash":"2513450c1711a21cf8024b53675e58a36f4acc10","modified":1627621455341},{"_id":"public/2021/04/28/备份OSS视频文件/index.html","hash":"3593115bd68b501aa15fbb9c70a49a858a25f104","modified":1627621455341},{"_id":"public/2021/04/28/备份数据库/index.html","hash":"a22f45a9bf43eed80c5c7a0c225da099e3b7e77a","modified":1627621455341},{"_id":"public/2021/04/08/清除OSS多余mp4文件/index.html","hash":"f74983901eeaddc660c93bde7bec1d490ff4913e","modified":1627621455341},{"_id":"public/2021/02/22/canal-adapter配置/index.html","hash":"8e3358dc2cb1c6c38a79467f55f438c21489c245","modified":1627621455341},{"_id":"public/2021/02/22/南海云课堂阿里云资源规格/index.html","hash":"e092060d675d6f798b21a7140c9fc2316d95ec33","modified":1627621455341},{"_id":"public/2021/02/22/开发规范/index.html","hash":"0c0b3d7295824cae5a8009dc72b3cc0d20388bbc","modified":1627621455341},{"_id":"public/2021/02/22/部署规范v1.0/index.html","hash":"9146ac4df32763185bf798349322fbbb41a4b127","modified":1627621455341},{"_id":"public/archives/index.html","hash":"a457078bfa6a886bfcc99fdfcf363d063dc0d123","modified":1627621455341},{"_id":"public/archives/page/2/index.html","hash":"393c8f888f404f4c24f8bbec5953887b8fd47608","modified":1627621455341},{"_id":"public/archives/2021/index.html","hash":"4cb4727277e12060db0512e174674ceb9262c62b","modified":1627621455341},{"_id":"public/archives/2021/page/2/index.html","hash":"0cecca665e2013ec345118a770d3a8f0f3393245","modified":1627621455341},{"_id":"public/archives/2021/02/index.html","hash":"7ed6894d3113ed11fe02a3a5027984e17468b2c2","modified":1627621455341},{"_id":"public/archives/2021/04/index.html","hash":"03b0e2c3bbd7a01438c73d8d7aa6a42683673909","modified":1627621455341},{"_id":"public/archives/2021/05/index.html","hash":"8c77962ea09c0bbbe7b529e7e1cba50d524d7ca1","modified":1627621455341},{"_id":"public/archives/2021/06/index.html","hash":"d2127f2c6bcb5ac1c18987097e0d50e595c7db96","modified":1627621455341},{"_id":"public/archives/2021/07/index.html","hash":"018491dba90604d44bc877a6fac47dcdfe843b58","modified":1627621455341},{"_id":"public/index.html","hash":"52098739f2a7ab4e899d7c61d9c43265cc6c030e","modified":1627621455341},{"_id":"public/page/2/index.html","hash":"bf89de5c720bd43205fdb80e0fa97b591865c02c","modified":1627621455341},{"_id":"public/tags/kafka/index.html","hash":"ea5db2616cff2eb40352913be264b080982b171a","modified":1627621455341},{"_id":"public/tags/devops/index.html","hash":"e56247ef192452aaac1a98af05711e225758e303","modified":1627621455341},{"_id":"public/tags/服务器/index.html","hash":"2e5d9a5f5139dd1993146b49381c16c4f9dd6b91","modified":1627621455341},{"_id":"public/tags/shell/index.html","hash":"e48678618f0d53067db61b53053e861c0b184f0e","modified":1627621455341},{"_id":"public/tags/规范/index.html","hash":"a92d9bfbd507ba1b076da676d935603f8c3cbcbe","modified":1627621455341},{"_id":"public/tags/java/index.html","hash":"99e69be12b2d7df80ce5385a71efd2cb60a5c165","modified":1627621455341},{"_id":"public/tags/vue/index.html","hash":"b4f3132263a4a0bc10a80eb92ef0aff41e4a3107","modified":1627621455341},{"_id":"public/categories/笔记/index.html","hash":"2b054a968610ee80a9aa8ad9dc6d236b6c5f99c2","modified":1627621455341},{"_id":"public/categories/研发流程/index.html","hash":"6868f09181f5c9e76df80962d30f3b8ff8469297","modified":1627621455341},{"_id":"public/categories/部署/index.html","hash":"717864d2516625bc343e03e7e741fed76a3666f9","modified":1627621455341},{"_id":"public/categories/运维/index.html","hash":"8ba3168f6619f49abcc11faaa9cc8f1e05d76e84","modified":1627621455341},{"_id":"public/categories/部署/攻略/index.html","hash":"2fa2d18c7249ac15dd51f98bdc3f57bd32d4cf72","modified":1627621455341},{"_id":"public/categories/运维/规格/index.html","hash":"2f6c2643c0901c57edcb37d99b0c5f084f2b410d","modified":1627621455341},{"_id":"public/categories/运维/脚本/index.html","hash":"d36f384cc8e9b097b78f58faec6089cac1b15aba","modified":1627621455341},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1627617089509},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1627617089509},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1627617089509},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1627617089509},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627617089509},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1627617089509},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1627617089509},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1627617089509},{"_id":"public/css/index.css","hash":"d15d9502d58efc5ee966dd4d43d1a36b31c7fff4","modified":1627617089509},{"_id":"public/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1627617089509},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1627617089509}],"Category":[{"name":"笔记","_id":"ckrpt6wdk0004hkax5j4l466i"},{"name":"研发流程","_id":"ckrpt6wdp0009hkax9wlzag7i"},{"name":"部署","_id":"ckrpt6wds000fhkax38dtfsgm"},{"name":"运维","_id":"ckrpt6we0000rhkax34xrf4md"},{"name":"攻略","parent":"ckrpt6wds000fhkax38dtfsgm","_id":"ckrpt6we60014hkax7cq62ccm"},{"name":"规格","parent":"ckrpt6we0000rhkax34xrf4md","_id":"ckrpt6wea001dhkax5k9r1dh9"},{"name":"脚本","parent":"ckrpt6we0000rhkax34xrf4md","_id":"ckrpt6web001hhkaxho68biv1"}],"Data":[],"Page":[{"title":"categories","type":"categories","date":"2021-07-30T02:35:19.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\ndate: 2021-07-30 10:35:19\n---\n","updated":"2021-07-30T02:35:49.870Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckrpt6wd90000hkax1bf65ku7","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","comments":0,"date":"2021-07-30T02:34:38.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false\ndate: 2021-07-30 10:34:38\n---\n","updated":"2021-07-30T02:35:05.303Z","path":"tags/index.html","_id":"ckrpt6wdh0002hkax06dm0cf4","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"ApachKafka实战笔记","date":"2021-06-07T08:51:07.000Z","_content":"\n- 在旧版本consumer 中，消费位移（ offset ）的保存与管理都是依托于ZooKeeper 来完成的。当数据量很大且消费很频繁时， ZooKeeper 的读／ 写性能往往容易成为系统瓶颈。这是旧版本consumer 为人话病的缺陷之一。而在新版本consumer 中，位移的管理与保存不再依靠 Zoo Keeper 了，自然这个瓶颈就消失了。\n  - 可以从命令看出。用的是 --bootstrap-server\n  - 位移不再保存在ZooKeeper 中，而是单独保存在Kafka 的一个内部topic 中： __consumer_offsets \n- kafka 消息留存时间：配置文件log.retention.hours=168，默认为 7 天\n- Kafka producer 提供了一个默认的分区器。对于每条待发迭的消息而言，如果该消息指定了key ，那么该partitioner 会根据key 的哈希值来选择目标分区：若这条消息没有指定key ，则partitioner 使用轮询的方式确认目标分区\n- 消息发送可能失败，例如分区的 leader 副本不可用（换届选举）。构建 producer 时指定 retrices 为 3，等待重试恢复。重试间隔（retry.backoff.ms）默认为100毫秒\n- 一个 topic 在创建时可以指定多个分区，每个分区有多个副本。Consumer 组里的单个 comsumer 被指定负责某个分区的消息。\n- ISR ，就是Kafka 集群动态维护的一组同步副本集合（ in-sync replicas ） \n  - 分区有多个副本（ replica ）\n  - leader 副本对外提供服务，而其他副本被称为follower 副本，与leader保持同步\n  - 落后leader 进度太多的follower 不能成为 leader \n- producer 的参数 acks：\n  - 0: 发完一条马上发下一条\n  - all 或者 -1: leader broker 写入本地，且等待 ISR 其它副本都写入本地后，才发响应结果\n  - 1: leader broker 写入本地，就发响应结果\n- 消费者组（consumer group）\n  - 一个 consumer group 可能有若干个 consumer 实例（ 一个group 只有一个实例也是允许的）\n  - 对于同一个group 而言， topic 的每条消息只能被发送到 group 下的一个 consumer 实例上\n  - topic 消息可以被发送到多个 group 中\n- 从Kafka consumer 的角度而言， poll 方法返回即认为consumer 成功消费了消息\n- session.timeout.ms coordinator ：检测失败的时间” 。因此在实际使用中，用户可以为该参数设置一个比较小的值让coordinator 能够更快地检测consumer 崩溃的情况，从而更快地开启rebalance ，避免造成更\n  大的消费滞后（ consumer lag ） 。目前该参数的默认值是10 秒。\n- max.poll.interval.ms \n- max.poll.records 该参数控制单次poll 调用返回的最大消息数。默认值 500\n- connections.max.idle.ms Kafka 会定期地关闭空闲Socket 连接导致下次consumer 处理请求时需要重新创建连向broker 的Socket 连接。当前默认值是9 分钟，如果用户实际环境中不在乎这些Socket 资源开销，比较推荐设置该参数值为 -1 ，即不要关闭这些空闲连接\n- consumer 端需要为每个它要读取的分区保存消费进度，即分区中当前最新消费消息的位置。该位置就被称为位移（ offset ） 。consumer 需要定期地向Kafka 提交自己的位置信息。这里的位移值通常是下一条待消费的消息的位置。\n- consumer 是自动提交位移的，自动提交间隔是5 秒，对应 auto.commit.interval.ms 参数\n- coordinator 和 leader \n  - coordinator 通常是Kafka 集群中的一个broker ，组内所有consumer 向 coordinator 发送JoinGroup 请求。当收集全JoinGroup 请求后， coordinator 从中选择一个consumer 担任group 的leader\n  - group 的 leader 是某个 consumer 实例，leader 负责为整个group 的所有成员制定分配方案\n- KafkaConsumer 是非线程安全的，可选：\n  - 每个线程维护一个KafkaConsumer\n  - 单Kafka Consumer 实例 ＋多worker 线程\n- KafkaProducer 是线程安全的，可以在多个线程中放心地使用同一个KafkaProducer 实例，事实上这也是社区推荐的producer 使用方法，因为通常它比每个线程维护一个Kafk:aProducer 实例效率要高\n- coordinator 负责组管理工作，consumer （group）程序负责分区分配\n","source":"_posts/ApachKafka实战笔记.md","raw":"---\ntitle: ApachKafka实战笔记\ndate: 2021-06-07 16:51:07\ncategories:\n  - 笔记\ntags:\n  - kafka\n---\n\n- 在旧版本consumer 中，消费位移（ offset ）的保存与管理都是依托于ZooKeeper 来完成的。当数据量很大且消费很频繁时， ZooKeeper 的读／ 写性能往往容易成为系统瓶颈。这是旧版本consumer 为人话病的缺陷之一。而在新版本consumer 中，位移的管理与保存不再依靠 Zoo Keeper 了，自然这个瓶颈就消失了。\n  - 可以从命令看出。用的是 --bootstrap-server\n  - 位移不再保存在ZooKeeper 中，而是单独保存在Kafka 的一个内部topic 中： __consumer_offsets \n- kafka 消息留存时间：配置文件log.retention.hours=168，默认为 7 天\n- Kafka producer 提供了一个默认的分区器。对于每条待发迭的消息而言，如果该消息指定了key ，那么该partitioner 会根据key 的哈希值来选择目标分区：若这条消息没有指定key ，则partitioner 使用轮询的方式确认目标分区\n- 消息发送可能失败，例如分区的 leader 副本不可用（换届选举）。构建 producer 时指定 retrices 为 3，等待重试恢复。重试间隔（retry.backoff.ms）默认为100毫秒\n- 一个 topic 在创建时可以指定多个分区，每个分区有多个副本。Consumer 组里的单个 comsumer 被指定负责某个分区的消息。\n- ISR ，就是Kafka 集群动态维护的一组同步副本集合（ in-sync replicas ） \n  - 分区有多个副本（ replica ）\n  - leader 副本对外提供服务，而其他副本被称为follower 副本，与leader保持同步\n  - 落后leader 进度太多的follower 不能成为 leader \n- producer 的参数 acks：\n  - 0: 发完一条马上发下一条\n  - all 或者 -1: leader broker 写入本地，且等待 ISR 其它副本都写入本地后，才发响应结果\n  - 1: leader broker 写入本地，就发响应结果\n- 消费者组（consumer group）\n  - 一个 consumer group 可能有若干个 consumer 实例（ 一个group 只有一个实例也是允许的）\n  - 对于同一个group 而言， topic 的每条消息只能被发送到 group 下的一个 consumer 实例上\n  - topic 消息可以被发送到多个 group 中\n- 从Kafka consumer 的角度而言， poll 方法返回即认为consumer 成功消费了消息\n- session.timeout.ms coordinator ：检测失败的时间” 。因此在实际使用中，用户可以为该参数设置一个比较小的值让coordinator 能够更快地检测consumer 崩溃的情况，从而更快地开启rebalance ，避免造成更\n  大的消费滞后（ consumer lag ） 。目前该参数的默认值是10 秒。\n- max.poll.interval.ms \n- max.poll.records 该参数控制单次poll 调用返回的最大消息数。默认值 500\n- connections.max.idle.ms Kafka 会定期地关闭空闲Socket 连接导致下次consumer 处理请求时需要重新创建连向broker 的Socket 连接。当前默认值是9 分钟，如果用户实际环境中不在乎这些Socket 资源开销，比较推荐设置该参数值为 -1 ，即不要关闭这些空闲连接\n- consumer 端需要为每个它要读取的分区保存消费进度，即分区中当前最新消费消息的位置。该位置就被称为位移（ offset ） 。consumer 需要定期地向Kafka 提交自己的位置信息。这里的位移值通常是下一条待消费的消息的位置。\n- consumer 是自动提交位移的，自动提交间隔是5 秒，对应 auto.commit.interval.ms 参数\n- coordinator 和 leader \n  - coordinator 通常是Kafka 集群中的一个broker ，组内所有consumer 向 coordinator 发送JoinGroup 请求。当收集全JoinGroup 请求后， coordinator 从中选择一个consumer 担任group 的leader\n  - group 的 leader 是某个 consumer 实例，leader 负责为整个group 的所有成员制定分配方案\n- KafkaConsumer 是非线程安全的，可选：\n  - 每个线程维护一个KafkaConsumer\n  - 单Kafka Consumer 实例 ＋多worker 线程\n- KafkaProducer 是线程安全的，可以在多个线程中放心地使用同一个KafkaProducer 实例，事实上这也是社区推荐的producer 使用方法，因为通常它比每个线程维护一个Kafk:aProducer 实例效率要高\n- coordinator 负责组管理工作，consumer （group）程序负责分区分配\n","slug":"ApachKafka实战笔记","published":1,"updated":"2021-07-30T03:21:40.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdd0001hkax3gdz1cfn","content":"<ul>\n<li>在旧版本consumer 中，消费位移（ offset ）的保存与管理都是依托于ZooKeeper 来完成的。当数据量很大且消费很频繁时， ZooKeeper 的读／ 写性能往往容易成为系统瓶颈。这是旧版本consumer 为人话病的缺陷之一。而在新版本consumer 中，位移的管理与保存不再依靠 Zoo Keeper 了，自然这个瓶颈就消失了。<ul>\n<li>可以从命令看出。用的是 –bootstrap-server</li>\n<li>位移不再保存在ZooKeeper 中，而是单独保存在Kafka 的一个内部topic 中： __consumer_offsets </li>\n</ul>\n</li>\n<li>kafka 消息留存时间：配置文件log.retention.hours=168，默认为 7 天</li>\n<li>Kafka producer 提供了一个默认的分区器。对于每条待发迭的消息而言，如果该消息指定了key ，那么该partitioner 会根据key 的哈希值来选择目标分区：若这条消息没有指定key ，则partitioner 使用轮询的方式确认目标分区</li>\n<li>消息发送可能失败，例如分区的 leader 副本不可用（换届选举）。构建 producer 时指定 retrices 为 3，等待重试恢复。重试间隔（retry.backoff.ms）默认为100毫秒</li>\n<li>一个 topic 在创建时可以指定多个分区，每个分区有多个副本。Consumer 组里的单个 comsumer 被指定负责某个分区的消息。</li>\n<li>ISR ，就是Kafka 集群动态维护的一组同步副本集合（ in-sync replicas ） <ul>\n<li>分区有多个副本（ replica ）</li>\n<li>leader 副本对外提供服务，而其他副本被称为follower 副本，与leader保持同步</li>\n<li>落后leader 进度太多的follower 不能成为 leader </li>\n</ul>\n</li>\n<li>producer 的参数 acks：<ul>\n<li>0: 发完一条马上发下一条</li>\n<li>all 或者 -1: leader broker 写入本地，且等待 ISR 其它副本都写入本地后，才发响应结果</li>\n<li>1: leader broker 写入本地，就发响应结果</li>\n</ul>\n</li>\n<li>消费者组（consumer group）<ul>\n<li>一个 consumer group 可能有若干个 consumer 实例（ 一个group 只有一个实例也是允许的）</li>\n<li>对于同一个group 而言， topic 的每条消息只能被发送到 group 下的一个 consumer 实例上</li>\n<li>topic 消息可以被发送到多个 group 中</li>\n</ul>\n</li>\n<li>从Kafka consumer 的角度而言， poll 方法返回即认为consumer 成功消费了消息</li>\n<li>session.timeout.ms coordinator ：检测失败的时间” 。因此在实际使用中，用户可以为该参数设置一个比较小的值让coordinator 能够更快地检测consumer 崩溃的情况，从而更快地开启rebalance ，避免造成更<br>大的消费滞后（ consumer lag ） 。目前该参数的默认值是10 秒。</li>\n<li>max.poll.interval.ms </li>\n<li>max.poll.records 该参数控制单次poll 调用返回的最大消息数。默认值 500</li>\n<li>connections.max.idle.ms Kafka 会定期地关闭空闲Socket 连接导致下次consumer 处理请求时需要重新创建连向broker 的Socket 连接。当前默认值是9 分钟，如果用户实际环境中不在乎这些Socket 资源开销，比较推荐设置该参数值为 -1 ，即不要关闭这些空闲连接</li>\n<li>consumer 端需要为每个它要读取的分区保存消费进度，即分区中当前最新消费消息的位置。该位置就被称为位移（ offset ） 。consumer 需要定期地向Kafka 提交自己的位置信息。这里的位移值通常是下一条待消费的消息的位置。</li>\n<li>consumer 是自动提交位移的，自动提交间隔是5 秒，对应 auto.commit.interval.ms 参数</li>\n<li>coordinator 和 leader <ul>\n<li>coordinator 通常是Kafka 集群中的一个broker ，组内所有consumer 向 coordinator 发送JoinGroup 请求。当收集全JoinGroup 请求后， coordinator 从中选择一个consumer 担任group 的leader</li>\n<li>group 的 leader 是某个 consumer 实例，leader 负责为整个group 的所有成员制定分配方案</li>\n</ul>\n</li>\n<li>KafkaConsumer 是非线程安全的，可选：<ul>\n<li>每个线程维护一个KafkaConsumer</li>\n<li>单Kafka Consumer 实例 ＋多worker 线程</li>\n</ul>\n</li>\n<li>KafkaProducer 是线程安全的，可以在多个线程中放心地使用同一个KafkaProducer 实例，事实上这也是社区推荐的producer 使用方法，因为通常它比每个线程维护一个Kafk:aProducer 实例效率要高</li>\n<li>coordinator 负责组管理工作，consumer （group）程序负责分区分配</li>\n</ul>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<ul>\n<li>在旧版本consumer 中，消费位移（ offset ）的保存与管理都是依托于ZooKeeper 来完成的。当数据量很大且消费很频繁时， ZooKeeper 的读／ 写性能往往容易成为系统瓶颈。这是旧版本consumer 为人话病的缺陷之一。而在新版本consumer 中，位移的管理与保存不再依靠 Zoo Keeper 了，自然这个瓶颈就消失了。<ul>\n<li>可以从命令看出。用的是 –bootstrap-server</li>\n<li>位移不再保存在ZooKeeper 中，而是单独保存在Kafka 的一个内部topic 中： __consumer_offsets </li>\n</ul>\n</li>\n<li>kafka 消息留存时间：配置文件log.retention.hours=168，默认为 7 天</li>\n<li>Kafka producer 提供了一个默认的分区器。对于每条待发迭的消息而言，如果该消息指定了key ，那么该partitioner 会根据key 的哈希值来选择目标分区：若这条消息没有指定key ，则partitioner 使用轮询的方式确认目标分区</li>\n<li>消息发送可能失败，例如分区的 leader 副本不可用（换届选举）。构建 producer 时指定 retrices 为 3，等待重试恢复。重试间隔（retry.backoff.ms）默认为100毫秒</li>\n<li>一个 topic 在创建时可以指定多个分区，每个分区有多个副本。Consumer 组里的单个 comsumer 被指定负责某个分区的消息。</li>\n<li>ISR ，就是Kafka 集群动态维护的一组同步副本集合（ in-sync replicas ） <ul>\n<li>分区有多个副本（ replica ）</li>\n<li>leader 副本对外提供服务，而其他副本被称为follower 副本，与leader保持同步</li>\n<li>落后leader 进度太多的follower 不能成为 leader </li>\n</ul>\n</li>\n<li>producer 的参数 acks：<ul>\n<li>0: 发完一条马上发下一条</li>\n<li>all 或者 -1: leader broker 写入本地，且等待 ISR 其它副本都写入本地后，才发响应结果</li>\n<li>1: leader broker 写入本地，就发响应结果</li>\n</ul>\n</li>\n<li>消费者组（consumer group）<ul>\n<li>一个 consumer group 可能有若干个 consumer 实例（ 一个group 只有一个实例也是允许的）</li>\n<li>对于同一个group 而言， topic 的每条消息只能被发送到 group 下的一个 consumer 实例上</li>\n<li>topic 消息可以被发送到多个 group 中</li>\n</ul>\n</li>\n<li>从Kafka consumer 的角度而言， poll 方法返回即认为consumer 成功消费了消息</li>\n<li>session.timeout.ms coordinator ：检测失败的时间” 。因此在实际使用中，用户可以为该参数设置一个比较小的值让coordinator 能够更快地检测consumer 崩溃的情况，从而更快地开启rebalance ，避免造成更<br>大的消费滞后（ consumer lag ） 。目前该参数的默认值是10 秒。</li>\n<li>max.poll.interval.ms </li>\n<li>max.poll.records 该参数控制单次poll 调用返回的最大消息数。默认值 500</li>\n<li>connections.max.idle.ms Kafka 会定期地关闭空闲Socket 连接导致下次consumer 处理请求时需要重新创建连向broker 的Socket 连接。当前默认值是9 分钟，如果用户实际环境中不在乎这些Socket 资源开销，比较推荐设置该参数值为 -1 ，即不要关闭这些空闲连接</li>\n<li>consumer 端需要为每个它要读取的分区保存消费进度，即分区中当前最新消费消息的位置。该位置就被称为位移（ offset ） 。consumer 需要定期地向Kafka 提交自己的位置信息。这里的位移值通常是下一条待消费的消息的位置。</li>\n<li>consumer 是自动提交位移的，自动提交间隔是5 秒，对应 auto.commit.interval.ms 参数</li>\n<li>coordinator 和 leader <ul>\n<li>coordinator 通常是Kafka 集群中的一个broker ，组内所有consumer 向 coordinator 发送JoinGroup 请求。当收集全JoinGroup 请求后， coordinator 从中选择一个consumer 担任group 的leader</li>\n<li>group 的 leader 是某个 consumer 实例，leader 负责为整个group 的所有成员制定分配方案</li>\n</ul>\n</li>\n<li>KafkaConsumer 是非线程安全的，可选：<ul>\n<li>每个线程维护一个KafkaConsumer</li>\n<li>单Kafka Consumer 实例 ＋多worker 线程</li>\n</ul>\n</li>\n<li>KafkaProducer 是线程安全的，可以在多个线程中放心地使用同一个KafkaProducer 实例，事实上这也是社区推荐的producer 使用方法，因为通常它比每个线程维护一个Kafk:aProducer 实例效率要高</li>\n<li>coordinator 负责组管理工作，consumer （group）程序负责分区分配</li>\n</ul>\n"},{"title":"Sonar-iOS扫描","date":"2021-05-26T08:51:07.000Z","_content":"\n## 概述\n\nSonar 免费的社区版本不支持 Obj-C /Swift  \n\nsonar -scanner 支持导入 Infer、SwiftLint、Lizard 生成的报告\n\n### 静态分析的三大工具\n\nClang、Infer 和 OCLint\n\n开源项目基于这 3 个工具做增强\n\n### 开源项目\n\n最开始是 [octo-technology/sonar-objective-c](https://github.com/octo-technology/sonar-objective-c) ，在 2015年不再维护。\n\n[Backelite/sonar-objective-c](https://github.com/Backelite/sonar-objective-c) fork 过来维护到 2018 年，另起新项目[Idean/sonar-swift](https://github.com/Idean/sonar-swift)\n\n[tal-tech/sonar-swift](https://github.com/tal-tech/sonar-swift) 基于[Idean/sonar-swift](https://github.com/Idean/sonar-swift) ，增加了 facebook infer 的结果导入，及项目中文化\n\n后者：\n\n- 下载 jar 包放到 SonarQube 的`extensions/plugins` 目录\n- 下载 `run-sonar-swift.sh`\n- 在待分析项目的目录下运行 `run-sonar-swift.sh`，会调用 `xcodebuild`，所以需要在 Mac 下运行\n\n\n\n所需流程如下：\n\n- 执行 xcodebuild，并将 log 记录输出到文件\n- 使用 xcpretty 将log日志输出为 json 格式\n- 执行 infer 分析，配置并忽略第三方的代码目录，导入刚刚的 json 编译日志\n- 执行 swiftlint ，并将结果输出到文件（如果有用到 swift 语言。但此工具只是代码格式的检查，不含语法或逻辑检查）\n- 使用 lizard 以 xml 格式输出\n  执行 SonarScanner ，并填写报告路径\n\n\n\n## 软件介绍\n\n### Infer\n\nInfer 是由Facebook公司推出的静态代码扫描工具，支持 C/C++/Java 语言的扫描。\n\n链接：https://github.com/facebook/infer\n\nInfer 调用 gcc/clang/javac 等编译命令，捕捉项目编译的日志，见 https://fbinfer.com/docs/analyzing-apps-or-projects\n\n所以同样需要 `xcodebuild ` \n\n\n\n### Darling\n\n类似 wine，Darling 让 macOS 软件运行在 Linux 上。安装 XCode？\n\nhttps://www.darlinghq.org/\n\n\n\n### SwiftLint\n\nGithub 提供安装包，MacOS 的 pkg 和 Linux 的，解压即可运行  \n\n```\n# 安装 swift 编译器\ndnf install swift-lang\n# 按 GitHub 说明，指定 libsourcekitdInProc.so 所在路径\nexport LINUX_SOURCEKIT_LIB_PATH=/usr/libexec/swift/lib\n```\n\n编写 main.swift\n\n```\nimport Foundation\n\nvar a=1/0\n```\n\n使用 SwiftLint 分析\n\n```\nswiftlint lint\n```\n\n结论：SwiftLint 只管代码风格，并不检查语法错误（除以0）\n\n\n\n### OCLint\n\n工作流程：\n\n- 项目编译\n\n- xcpretty 工具处理生成 compile_commands.json。里面列出每个源文件编译时所用的命令\n- oclint-json-compilation-database 基于 compile_commands.json，对每个源文件执行的静态代码分析\n\n\n\n## 实操步骤\n\n检查 SDK 是否正常\n```\nxcodebuild -showsdks\n# 如果提示错误，要指定 xcode 的位置\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer/\n```\n\n安装 xcpretty\n\n```\nsudo gem install xcpretty\n```\n\n\n 安装 infer\n```\nbrew install infer\n```\n\n\n注意事项\n\n- 使用本机的 apple id 编译（涉及到保存在本机的 keychain）\n- 要修改 project.pbxproj 里的所有 DEVELOPMENT_TEAM 和 PRODUCT_BUNDLE_IDENTIFIER 对应的值（可以先在 XCode 操作一遍，获取 DEVELOPMENT_TEAM 即团队 ID。后者 bundle id 可以加个随机数）\n- 使用本机终端执行一次下面的 xcodebuild ，会弹框允许访问登录钥匙串（输入账号的登录密码确认），选择“总是允许”。或者打开系统的`钥匙串访问`，左边点击`登录`，右边展开`Apple Development: APPLE_ID`，双击`专用密钥`，弹框切换到`访问控制 `，勾选`允许所有应用访问此项目`\n- 使用远程shell登录Mac时，默认是没有账户的，但是访问钥匙串要求必须有用户身份，所以 build 步骤前添加一步解锁钥匙串\n\n下面编译\n\n```\n# 如果是 shell 远程登录运行，需要解锁钥匙串\nsecurity unlock-keychain\n\n# 使用 xcodebuild 编译，签名出错可忽略？\nxcodebuild clean build -workspace InteractiveBroadcast.xcworkspace -scheme InteractiveBroadcast -destination 'generic/platform=iOS' COMPILER_INDEX_STORE_ENABLE=NO | tee xcodebuild.log\n\n# 使用 xcpretty 整理 xcodebuild 的日志\nLC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 xcpretty -r json-compilation-database -o compile_commands.json < xcodebuild.log > /dev/null\n\n# 使用 infer 从 compile_commands.json 分析，--skip-analysis-in-path 是忽略扫描目录\ninfer run --skip-analysis-in-path Pods --compilation-database compile_commands.json\n\n# 结果导入到 sonarqube\nsonar-scanner -Dsonar.host.url=http://192.168.1.193:9000 -Dsonar.projectKey=Anxin_IAC_Client/ios-client -Dsonar.sources=. -Dsonar.swift.infer.report=infer-out/report.json\n```\n\n\n\n### OCLint 安装及单独使用\n\n```\nbrew install oclint\n\n# // 以下2步与 Infer 一样的\n# 使用 xcodebuild 编译，签名出错可忽略？\nxcodebuild clean build -workspace InteractiveBroadcast.xcworkspace -scheme InteractiveBroadcast -destination 'generic/platform=iOS' COMPILER_INDEX_STORE_ENABLE=NO | tee xcodebuild.log\n\n# oclint-xcodebuild 已不维护，官方同样推荐使用 xcpretty 整理日志\n# 使用 xcpretty 整理 xcodebuild 的日志\nxcpretty -r json-compilation-database -o compile_commands.json < xcodebuild.log > /dev/null\n\n# OCLint 分析，结果导出为 report.html\noclint-json-compilation-database -e Pods -- -report-type html -o report.html -rc LONG_LINE=9999 -max-priority-1=9999 -max-priority-2=9999 -max-priority-3=9999\n```\n\n\n\n## 其它\n\n```\ngem list\nsudo gem install -n /usr/local/bin cocoapods\nrm -fr Podfile.lock Pods\npod install\n\n```\n\n","source":"_posts/Sonar-iOS扫描.md","raw":"---\ntitle: Sonar-iOS扫描\ndate: 2021-05-26 16:51:07\ncategories:\n  - 研发流程\ntags:\n  - devops\n---\n\n## 概述\n\nSonar 免费的社区版本不支持 Obj-C /Swift  \n\nsonar -scanner 支持导入 Infer、SwiftLint、Lizard 生成的报告\n\n### 静态分析的三大工具\n\nClang、Infer 和 OCLint\n\n开源项目基于这 3 个工具做增强\n\n### 开源项目\n\n最开始是 [octo-technology/sonar-objective-c](https://github.com/octo-technology/sonar-objective-c) ，在 2015年不再维护。\n\n[Backelite/sonar-objective-c](https://github.com/Backelite/sonar-objective-c) fork 过来维护到 2018 年，另起新项目[Idean/sonar-swift](https://github.com/Idean/sonar-swift)\n\n[tal-tech/sonar-swift](https://github.com/tal-tech/sonar-swift) 基于[Idean/sonar-swift](https://github.com/Idean/sonar-swift) ，增加了 facebook infer 的结果导入，及项目中文化\n\n后者：\n\n- 下载 jar 包放到 SonarQube 的`extensions/plugins` 目录\n- 下载 `run-sonar-swift.sh`\n- 在待分析项目的目录下运行 `run-sonar-swift.sh`，会调用 `xcodebuild`，所以需要在 Mac 下运行\n\n\n\n所需流程如下：\n\n- 执行 xcodebuild，并将 log 记录输出到文件\n- 使用 xcpretty 将log日志输出为 json 格式\n- 执行 infer 分析，配置并忽略第三方的代码目录，导入刚刚的 json 编译日志\n- 执行 swiftlint ，并将结果输出到文件（如果有用到 swift 语言。但此工具只是代码格式的检查，不含语法或逻辑检查）\n- 使用 lizard 以 xml 格式输出\n  执行 SonarScanner ，并填写报告路径\n\n\n\n## 软件介绍\n\n### Infer\n\nInfer 是由Facebook公司推出的静态代码扫描工具，支持 C/C++/Java 语言的扫描。\n\n链接：https://github.com/facebook/infer\n\nInfer 调用 gcc/clang/javac 等编译命令，捕捉项目编译的日志，见 https://fbinfer.com/docs/analyzing-apps-or-projects\n\n所以同样需要 `xcodebuild ` \n\n\n\n### Darling\n\n类似 wine，Darling 让 macOS 软件运行在 Linux 上。安装 XCode？\n\nhttps://www.darlinghq.org/\n\n\n\n### SwiftLint\n\nGithub 提供安装包，MacOS 的 pkg 和 Linux 的，解压即可运行  \n\n```\n# 安装 swift 编译器\ndnf install swift-lang\n# 按 GitHub 说明，指定 libsourcekitdInProc.so 所在路径\nexport LINUX_SOURCEKIT_LIB_PATH=/usr/libexec/swift/lib\n```\n\n编写 main.swift\n\n```\nimport Foundation\n\nvar a=1/0\n```\n\n使用 SwiftLint 分析\n\n```\nswiftlint lint\n```\n\n结论：SwiftLint 只管代码风格，并不检查语法错误（除以0）\n\n\n\n### OCLint\n\n工作流程：\n\n- 项目编译\n\n- xcpretty 工具处理生成 compile_commands.json。里面列出每个源文件编译时所用的命令\n- oclint-json-compilation-database 基于 compile_commands.json，对每个源文件执行的静态代码分析\n\n\n\n## 实操步骤\n\n检查 SDK 是否正常\n```\nxcodebuild -showsdks\n# 如果提示错误，要指定 xcode 的位置\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer/\n```\n\n安装 xcpretty\n\n```\nsudo gem install xcpretty\n```\n\n\n 安装 infer\n```\nbrew install infer\n```\n\n\n注意事项\n\n- 使用本机的 apple id 编译（涉及到保存在本机的 keychain）\n- 要修改 project.pbxproj 里的所有 DEVELOPMENT_TEAM 和 PRODUCT_BUNDLE_IDENTIFIER 对应的值（可以先在 XCode 操作一遍，获取 DEVELOPMENT_TEAM 即团队 ID。后者 bundle id 可以加个随机数）\n- 使用本机终端执行一次下面的 xcodebuild ，会弹框允许访问登录钥匙串（输入账号的登录密码确认），选择“总是允许”。或者打开系统的`钥匙串访问`，左边点击`登录`，右边展开`Apple Development: APPLE_ID`，双击`专用密钥`，弹框切换到`访问控制 `，勾选`允许所有应用访问此项目`\n- 使用远程shell登录Mac时，默认是没有账户的，但是访问钥匙串要求必须有用户身份，所以 build 步骤前添加一步解锁钥匙串\n\n下面编译\n\n```\n# 如果是 shell 远程登录运行，需要解锁钥匙串\nsecurity unlock-keychain\n\n# 使用 xcodebuild 编译，签名出错可忽略？\nxcodebuild clean build -workspace InteractiveBroadcast.xcworkspace -scheme InteractiveBroadcast -destination 'generic/platform=iOS' COMPILER_INDEX_STORE_ENABLE=NO | tee xcodebuild.log\n\n# 使用 xcpretty 整理 xcodebuild 的日志\nLC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 xcpretty -r json-compilation-database -o compile_commands.json < xcodebuild.log > /dev/null\n\n# 使用 infer 从 compile_commands.json 分析，--skip-analysis-in-path 是忽略扫描目录\ninfer run --skip-analysis-in-path Pods --compilation-database compile_commands.json\n\n# 结果导入到 sonarqube\nsonar-scanner -Dsonar.host.url=http://192.168.1.193:9000 -Dsonar.projectKey=Anxin_IAC_Client/ios-client -Dsonar.sources=. -Dsonar.swift.infer.report=infer-out/report.json\n```\n\n\n\n### OCLint 安装及单独使用\n\n```\nbrew install oclint\n\n# // 以下2步与 Infer 一样的\n# 使用 xcodebuild 编译，签名出错可忽略？\nxcodebuild clean build -workspace InteractiveBroadcast.xcworkspace -scheme InteractiveBroadcast -destination 'generic/platform=iOS' COMPILER_INDEX_STORE_ENABLE=NO | tee xcodebuild.log\n\n# oclint-xcodebuild 已不维护，官方同样推荐使用 xcpretty 整理日志\n# 使用 xcpretty 整理 xcodebuild 的日志\nxcpretty -r json-compilation-database -o compile_commands.json < xcodebuild.log > /dev/null\n\n# OCLint 分析，结果导出为 report.html\noclint-json-compilation-database -e Pods -- -report-type html -o report.html -rc LONG_LINE=9999 -max-priority-1=9999 -max-priority-2=9999 -max-priority-3=9999\n```\n\n\n\n## 其它\n\n```\ngem list\nsudo gem install -n /usr/local/bin cocoapods\nrm -fr Podfile.lock Pods\npod install\n\n```\n\n","slug":"Sonar-iOS扫描","published":1,"updated":"2021-07-30T04:01:10.089Z","_id":"ckrpt6wdi0003hkax57lpbl64","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Sonar 免费的社区版本不支持 Obj-C /Swift  </p>\n<p>sonar -scanner 支持导入 Infer、SwiftLint、Lizard 生成的报告</p>\n<h3 id=\"静态分析的三大工具\"><a href=\"#静态分析的三大工具\" class=\"headerlink\" title=\"静态分析的三大工具\"></a>静态分析的三大工具</h3><p>Clang、Infer 和 OCLint</p>\n<p>开源项目基于这 3 个工具做增强</p>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><p>最开始是 <a href=\"https://github.com/octo-technology/sonar-objective-c\">octo-technology/sonar-objective-c</a> ，在 2015年不再维护。</p>\n<p><a href=\"https://github.com/Backelite/sonar-objective-c\">Backelite/sonar-objective-c</a> fork 过来维护到 2018 年，另起新项目<a href=\"https://github.com/Idean/sonar-swift\">Idean/sonar-swift</a></p>\n<p><a href=\"https://github.com/tal-tech/sonar-swift\">tal-tech/sonar-swift</a> 基于<a href=\"https://github.com/Idean/sonar-swift\">Idean/sonar-swift</a> ，增加了 facebook infer 的结果导入，及项目中文化</p>\n<p>后者：</p>\n<ul>\n<li>下载 jar 包放到 SonarQube 的<code>extensions/plugins</code> 目录</li>\n<li>下载 <code>run-sonar-swift.sh</code></li>\n<li>在待分析项目的目录下运行 <code>run-sonar-swift.sh</code>，会调用 <code>xcodebuild</code>，所以需要在 Mac 下运行</li>\n</ul>\n<p>所需流程如下：</p>\n<ul>\n<li>执行 xcodebuild，并将 log 记录输出到文件</li>\n<li>使用 xcpretty 将log日志输出为 json 格式</li>\n<li>执行 infer 分析，配置并忽略第三方的代码目录，导入刚刚的 json 编译日志</li>\n<li>执行 swiftlint ，并将结果输出到文件（如果有用到 swift 语言。但此工具只是代码格式的检查，不含语法或逻辑检查）</li>\n<li>使用 lizard 以 xml 格式输出<br>执行 SonarScanner ，并填写报告路径</li>\n</ul>\n<h2 id=\"软件介绍\"><a href=\"#软件介绍\" class=\"headerlink\" title=\"软件介绍\"></a>软件介绍</h2><h3 id=\"Infer\"><a href=\"#Infer\" class=\"headerlink\" title=\"Infer\"></a>Infer</h3><p>Infer 是由Facebook公司推出的静态代码扫描工具，支持 C/C++/Java 语言的扫描。</p>\n<p>链接：<a href=\"https://github.com/facebook/infer\">https://github.com/facebook/infer</a></p>\n<p>Infer 调用 gcc/clang/javac 等编译命令，捕捉项目编译的日志，见 <a href=\"https://fbinfer.com/docs/analyzing-apps-or-projects\">https://fbinfer.com/docs/analyzing-apps-or-projects</a></p>\n<p>所以同样需要 <code>xcodebuild </code> </p>\n<h3 id=\"Darling\"><a href=\"#Darling\" class=\"headerlink\" title=\"Darling\"></a>Darling</h3><p>类似 wine，Darling 让 macOS 软件运行在 Linux 上。安装 XCode？</p>\n<p><a href=\"https://www.darlinghq.org/\">https://www.darlinghq.org/</a></p>\n<h3 id=\"SwiftLint\"><a href=\"#SwiftLint\" class=\"headerlink\" title=\"SwiftLint\"></a>SwiftLint</h3><p>Github 提供安装包，MacOS 的 pkg 和 Linux 的，解压即可运行  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 swift 编译器</span><br><span class=\"line\">dnf install swift-lang</span><br><span class=\"line\"># 按 GitHub 说明，指定 libsourcekitdInProc.so 所在路径</span><br><span class=\"line\">export LINUX_SOURCEKIT_LIB_PATH=/usr/libexec/swift/lib</span><br></pre></td></tr></table></figure>\n\n<p>编写 main.swift</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Foundation</span><br><span class=\"line\"></span><br><span class=\"line\">var a=1/0</span><br></pre></td></tr></table></figure>\n\n<p>使用 SwiftLint 分析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swiftlint lint</span><br></pre></td></tr></table></figure>\n\n<p>结论：SwiftLint 只管代码风格，并不检查语法错误（除以0）</p>\n<h3 id=\"OCLint\"><a href=\"#OCLint\" class=\"headerlink\" title=\"OCLint\"></a>OCLint</h3><p>工作流程：</p>\n<ul>\n<li><p>项目编译</p>\n</li>\n<li><p>xcpretty 工具处理生成 compile_commands.json。里面列出每个源文件编译时所用的命令</p>\n</li>\n<li><p>oclint-json-compilation-database 基于 compile_commands.json，对每个源文件执行的静态代码分析</p>\n</li>\n</ul>\n<h2 id=\"实操步骤\"><a href=\"#实操步骤\" class=\"headerlink\" title=\"实操步骤\"></a>实操步骤</h2><p>检查 SDK 是否正常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -showsdks</span><br><span class=\"line\"># 如果提示错误，要指定 xcode 的位置</span><br><span class=\"line\">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer/</span><br></pre></td></tr></table></figure>\n\n<p>安装 xcpretty</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install xcpretty</span><br></pre></td></tr></table></figure>\n\n\n<p> 安装 infer</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install infer</span><br></pre></td></tr></table></figure>\n\n\n<p>注意事项</p>\n<ul>\n<li>使用本机的 apple id 编译（涉及到保存在本机的 keychain）</li>\n<li>要修改 project.pbxproj 里的所有 DEVELOPMENT_TEAM 和 PRODUCT_BUNDLE_IDENTIFIER 对应的值（可以先在 XCode 操作一遍，获取 DEVELOPMENT_TEAM 即团队 ID。后者 bundle id 可以加个随机数）</li>\n<li>使用本机终端执行一次下面的 xcodebuild ，会弹框允许访问登录钥匙串（输入账号的登录密码确认），选择“总是允许”。或者打开系统的<code>钥匙串访问</code>，左边点击<code>登录</code>，右边展开<code>Apple Development: APPLE_ID</code>，双击<code>专用密钥</code>，弹框切换到<code>访问控制 </code>，勾选<code>允许所有应用访问此项目</code></li>\n<li>使用远程shell登录Mac时，默认是没有账户的，但是访问钥匙串要求必须有用户身份，所以 build 步骤前添加一步解锁钥匙串</li>\n</ul>\n<p>下面编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果是 shell 远程登录运行，需要解锁钥匙串</span><br><span class=\"line\">security unlock-keychain</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 xcodebuild 编译，签名出错可忽略？</span><br><span class=\"line\">xcodebuild clean build -workspace InteractiveBroadcast.xcworkspace -scheme InteractiveBroadcast -destination &#x27;generic/platform=iOS&#x27; COMPILER_INDEX_STORE_ENABLE=NO | tee xcodebuild.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 xcpretty 整理 xcodebuild 的日志</span><br><span class=\"line\">LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 xcpretty -r json-compilation-database -o compile_commands.json &lt; xcodebuild.log &gt; /dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 infer 从 compile_commands.json 分析，--skip-analysis-in-path 是忽略扫描目录</span><br><span class=\"line\">infer run --skip-analysis-in-path Pods --compilation-database compile_commands.json</span><br><span class=\"line\"></span><br><span class=\"line\"># 结果导入到 sonarqube</span><br><span class=\"line\">sonar-scanner -Dsonar.host.url=http://192.168.1.193:9000 -Dsonar.projectKey=Anxin_IAC_Client/ios-client -Dsonar.sources=. -Dsonar.swift.infer.report=infer-out/report.json</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"OCLint-安装及单独使用\"><a href=\"#OCLint-安装及单独使用\" class=\"headerlink\" title=\"OCLint 安装及单独使用\"></a>OCLint 安装及单独使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install oclint</span><br><span class=\"line\"></span><br><span class=\"line\"># // 以下2步与 Infer 一样的</span><br><span class=\"line\"># 使用 xcodebuild 编译，签名出错可忽略？</span><br><span class=\"line\">xcodebuild clean build -workspace InteractiveBroadcast.xcworkspace -scheme InteractiveBroadcast -destination &#x27;generic/platform=iOS&#x27; COMPILER_INDEX_STORE_ENABLE=NO | tee xcodebuild.log</span><br><span class=\"line\"></span><br><span class=\"line\"># oclint-xcodebuild 已不维护，官方同样推荐使用 xcpretty 整理日志</span><br><span class=\"line\"># 使用 xcpretty 整理 xcodebuild 的日志</span><br><span class=\"line\">xcpretty -r json-compilation-database -o compile_commands.json &lt; xcodebuild.log &gt; /dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"># OCLint 分析，结果导出为 report.html</span><br><span class=\"line\">oclint-json-compilation-database -e Pods -- -report-type html -o report.html -rc LONG_LINE=9999 -max-priority-1=9999 -max-priority-2=9999 -max-priority-3=9999</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem list</span><br><span class=\"line\">sudo gem install -n /usr/local/bin cocoapods</span><br><span class=\"line\">rm -fr Podfile.lock Pods</span><br><span class=\"line\">pod install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Sonar 免费的社区版本不支持 Obj-C /Swift  </p>\n<p>sonar -scanner 支持导入 Infer、SwiftLint、Lizard 生成的报告</p>\n<h3 id=\"静态分析的三大工具\"><a href=\"#静态分析的三大工具\" class=\"headerlink\" title=\"静态分析的三大工具\"></a>静态分析的三大工具</h3><p>Clang、Infer 和 OCLint</p>\n<p>开源项目基于这 3 个工具做增强</p>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><p>最开始是 <a href=\"https://github.com/octo-technology/sonar-objective-c\">octo-technology/sonar-objective-c</a> ，在 2015年不再维护。</p>\n<p><a href=\"https://github.com/Backelite/sonar-objective-c\">Backelite/sonar-objective-c</a> fork 过来维护到 2018 年，另起新项目<a href=\"https://github.com/Idean/sonar-swift\">Idean/sonar-swift</a></p>\n<p><a href=\"https://github.com/tal-tech/sonar-swift\">tal-tech/sonar-swift</a> 基于<a href=\"https://github.com/Idean/sonar-swift\">Idean/sonar-swift</a> ，增加了 facebook infer 的结果导入，及项目中文化</p>\n<p>后者：</p>\n<ul>\n<li>下载 jar 包放到 SonarQube 的<code>extensions/plugins</code> 目录</li>\n<li>下载 <code>run-sonar-swift.sh</code></li>\n<li>在待分析项目的目录下运行 <code>run-sonar-swift.sh</code>，会调用 <code>xcodebuild</code>，所以需要在 Mac 下运行</li>\n</ul>\n<p>所需流程如下：</p>\n<ul>\n<li>执行 xcodebuild，并将 log 记录输出到文件</li>\n<li>使用 xcpretty 将log日志输出为 json 格式</li>\n<li>执行 infer 分析，配置并忽略第三方的代码目录，导入刚刚的 json 编译日志</li>\n<li>执行 swiftlint ，并将结果输出到文件（如果有用到 swift 语言。但此工具只是代码格式的检查，不含语法或逻辑检查）</li>\n<li>使用 lizard 以 xml 格式输出<br>执行 SonarScanner ，并填写报告路径</li>\n</ul>\n<h2 id=\"软件介绍\"><a href=\"#软件介绍\" class=\"headerlink\" title=\"软件介绍\"></a>软件介绍</h2><h3 id=\"Infer\"><a href=\"#Infer\" class=\"headerlink\" title=\"Infer\"></a>Infer</h3><p>Infer 是由Facebook公司推出的静态代码扫描工具，支持 C/C++/Java 语言的扫描。</p>\n<p>链接：<a href=\"https://github.com/facebook/infer\">https://github.com/facebook/infer</a></p>\n<p>Infer 调用 gcc/clang/javac 等编译命令，捕捉项目编译的日志，见 <a href=\"https://fbinfer.com/docs/analyzing-apps-or-projects\">https://fbinfer.com/docs/analyzing-apps-or-projects</a></p>\n<p>所以同样需要 <code>xcodebuild </code> </p>\n<h3 id=\"Darling\"><a href=\"#Darling\" class=\"headerlink\" title=\"Darling\"></a>Darling</h3><p>类似 wine，Darling 让 macOS 软件运行在 Linux 上。安装 XCode？</p>\n<p><a href=\"https://www.darlinghq.org/\">https://www.darlinghq.org/</a></p>\n<h3 id=\"SwiftLint\"><a href=\"#SwiftLint\" class=\"headerlink\" title=\"SwiftLint\"></a>SwiftLint</h3><p>Github 提供安装包，MacOS 的 pkg 和 Linux 的，解压即可运行  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 swift 编译器</span><br><span class=\"line\">dnf install swift-lang</span><br><span class=\"line\"># 按 GitHub 说明，指定 libsourcekitdInProc.so 所在路径</span><br><span class=\"line\">export LINUX_SOURCEKIT_LIB_PATH=/usr/libexec/swift/lib</span><br></pre></td></tr></table></figure>\n\n<p>编写 main.swift</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Foundation</span><br><span class=\"line\"></span><br><span class=\"line\">var a=1/0</span><br></pre></td></tr></table></figure>\n\n<p>使用 SwiftLint 分析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swiftlint lint</span><br></pre></td></tr></table></figure>\n\n<p>结论：SwiftLint 只管代码风格，并不检查语法错误（除以0）</p>\n<h3 id=\"OCLint\"><a href=\"#OCLint\" class=\"headerlink\" title=\"OCLint\"></a>OCLint</h3><p>工作流程：</p>\n<ul>\n<li><p>项目编译</p>\n</li>\n<li><p>xcpretty 工具处理生成 compile_commands.json。里面列出每个源文件编译时所用的命令</p>\n</li>\n<li><p>oclint-json-compilation-database 基于 compile_commands.json，对每个源文件执行的静态代码分析</p>\n</li>\n</ul>\n<h2 id=\"实操步骤\"><a href=\"#实操步骤\" class=\"headerlink\" title=\"实操步骤\"></a>实操步骤</h2><p>检查 SDK 是否正常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -showsdks</span><br><span class=\"line\"># 如果提示错误，要指定 xcode 的位置</span><br><span class=\"line\">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer/</span><br></pre></td></tr></table></figure>\n\n<p>安装 xcpretty</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install xcpretty</span><br></pre></td></tr></table></figure>\n\n\n<p> 安装 infer</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install infer</span><br></pre></td></tr></table></figure>\n\n\n<p>注意事项</p>\n<ul>\n<li>使用本机的 apple id 编译（涉及到保存在本机的 keychain）</li>\n<li>要修改 project.pbxproj 里的所有 DEVELOPMENT_TEAM 和 PRODUCT_BUNDLE_IDENTIFIER 对应的值（可以先在 XCode 操作一遍，获取 DEVELOPMENT_TEAM 即团队 ID。后者 bundle id 可以加个随机数）</li>\n<li>使用本机终端执行一次下面的 xcodebuild ，会弹框允许访问登录钥匙串（输入账号的登录密码确认），选择“总是允许”。或者打开系统的<code>钥匙串访问</code>，左边点击<code>登录</code>，右边展开<code>Apple Development: APPLE_ID</code>，双击<code>专用密钥</code>，弹框切换到<code>访问控制 </code>，勾选<code>允许所有应用访问此项目</code></li>\n<li>使用远程shell登录Mac时，默认是没有账户的，但是访问钥匙串要求必须有用户身份，所以 build 步骤前添加一步解锁钥匙串</li>\n</ul>\n<p>下面编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果是 shell 远程登录运行，需要解锁钥匙串</span><br><span class=\"line\">security unlock-keychain</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 xcodebuild 编译，签名出错可忽略？</span><br><span class=\"line\">xcodebuild clean build -workspace InteractiveBroadcast.xcworkspace -scheme InteractiveBroadcast -destination &#x27;generic/platform=iOS&#x27; COMPILER_INDEX_STORE_ENABLE=NO | tee xcodebuild.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 xcpretty 整理 xcodebuild 的日志</span><br><span class=\"line\">LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 xcpretty -r json-compilation-database -o compile_commands.json &lt; xcodebuild.log &gt; /dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 infer 从 compile_commands.json 分析，--skip-analysis-in-path 是忽略扫描目录</span><br><span class=\"line\">infer run --skip-analysis-in-path Pods --compilation-database compile_commands.json</span><br><span class=\"line\"></span><br><span class=\"line\"># 结果导入到 sonarqube</span><br><span class=\"line\">sonar-scanner -Dsonar.host.url=http://192.168.1.193:9000 -Dsonar.projectKey=Anxin_IAC_Client/ios-client -Dsonar.sources=. -Dsonar.swift.infer.report=infer-out/report.json</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"OCLint-安装及单独使用\"><a href=\"#OCLint-安装及单独使用\" class=\"headerlink\" title=\"OCLint 安装及单独使用\"></a>OCLint 安装及单独使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install oclint</span><br><span class=\"line\"></span><br><span class=\"line\"># // 以下2步与 Infer 一样的</span><br><span class=\"line\"># 使用 xcodebuild 编译，签名出错可忽略？</span><br><span class=\"line\">xcodebuild clean build -workspace InteractiveBroadcast.xcworkspace -scheme InteractiveBroadcast -destination &#x27;generic/platform=iOS&#x27; COMPILER_INDEX_STORE_ENABLE=NO | tee xcodebuild.log</span><br><span class=\"line\"></span><br><span class=\"line\"># oclint-xcodebuild 已不维护，官方同样推荐使用 xcpretty 整理日志</span><br><span class=\"line\"># 使用 xcpretty 整理 xcodebuild 的日志</span><br><span class=\"line\">xcpretty -r json-compilation-database -o compile_commands.json &lt; xcodebuild.log &gt; /dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"># OCLint 分析，结果导出为 report.html</span><br><span class=\"line\">oclint-json-compilation-database -e Pods -- -report-type html -o report.html -rc LONG_LINE=9999 -max-priority-1=9999 -max-priority-2=9999 -max-priority-3=9999</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem list</span><br><span class=\"line\">sudo gem install -n /usr/local/bin cocoapods</span><br><span class=\"line\">rm -fr Podfile.lock Pods</span><br><span class=\"line\">pod install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"canal-adapter配置","date":"2021-02-22T08:51:07.000Z","_content":"\n参考：<https://blog.csdn.net/jcmj123456/article/details/109705562>\n\n## MySQL\n\nMySQL 需开启 binlog 写入功能，并配置 binlog-format 为 ROW 模式\n\n```\n[mysqld]\nlog-bin=mysql-bin # 开启 binlog\nbinlog-format=ROW # 选择 ROW 模式\nserver_id=1 # 配置 MySQL replaction 需要\n```\n检查数据库是否打开上述开关  \n```sql\nshow variables like '%log_bin%'\nshow variables like 'binlog_format%';\n```\n\n创建 canal 账号，用于 canal 连接 MySQL， 该账号必须具有作为 MySQL slave 的权限，如使用已有账户，可直接使用 grant 命令授权\n\n```sql\nCREATE USER canal IDENTIFIED BY 'canal';  \nGRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';\n-- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;\nFLUSH PRIVILEGES;\n```\n\n假设有数据库表 `product`\n\n```\n\nCREATE TABLE `product`  (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `title` varchar(255),\n  `sub_title` varchar(255),\n  PRIMARY KEY (`id`)\n)\n```\n\n\n\n## Canal Server\n\n使用 docker 启动，参考<https://github.com/alibaba/canal/wiki/Docker-QuickStart>\n\n```shell\n# 下载脚本\nwget https://raw.githubusercontent.com/alibaba/canal/master/docker/run.sh \n\n# 构建一个destination name为test的队列\nsh run.sh -e canal.auto.scan=false \\\n\t\t  -e canal.destinations=test \\\n\t\t  -e canal.instance.master.address=127.0.0.1:3306  \\\n\t\t  -e canal.instance.dbUsername=canal  \\\n\t\t  -e canal.instance.dbPassword=canal  \\\n\t\t  -e canal.instance.connectionCharset=UTF-8 \\\n\t\t  -e canal.instance.tsdb.enable=true \\\n\t\t  -e canal.instance.gtidon=false\n# 最终会变为：docker run -d -it -h 0 {上面所有的 -e 参数} --name=canal-server --net=host -m 4096m canal/canal-server\n```\n\n\n\n## Elastic 设置\n\n先运行一个没有 xpack 功能的集群，版本是 7.10.2\n\n创建数据库表 product 对应的索引，在 kibana 的 dev_tools 里运行：\n\n```json\nPUT product\n{\n  \"mappings\": {\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\"\n      },\n      \"title\": {\n        \"type\": \"text\"\n      },\n      \"sub_title\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n```\n\n\n\n## Canal-Adapter 部署\n\n- 从 github 上下载并解压 release 包  <https://github.com/alibaba/canal/releases/download/canal-1.1.5/canal.adapter-1.1.5.tar.gz>\n\n- 由于发布包里的 ` client-adapter.es7x`有 bug，会出现 com.alibaba.druid.pool.DruidDataSource cannot be cast to com.alibaba.druid.pool.DruidDataSource  的 bug，见 [issue 3144](https://github.com/alibaba/canal/issues/3144)，需要重新编译：\n\n  - 下载源码 <https://github.com/alibaba/canal/archive/refs/tags/canal-1.1.5.tar.gz>\n  - 修改 client-adapter/escore 目录下的 pom.xml，在 druid 的依赖定义增加`<scope>provided</scope>`\n  - 在项目的**根目录**下编译。用新编译出来的 client-adapter.es7x-1.1.5-jar-with-dependencies.jar ，替换原来 plugin 目录下的\n\n- 配置 canal-adapter 的 conf/application.yml\n\n  ```yaml\n  canal.conf:\n    mode: tcp #tcp kafka rocketMQ rabbitMQ\n    consumerProperties:\n      # canal tcp consumer\n      canal.tcp.server.host: 127.0.0.1:11111\n    srcDataSources:\n      defaultDS:\n        url: jdbc:mysql://127.0.0.1:3306/{DBName}?useUnicode=true\n        username: canal\n        password: canal  \n    canalAdapters:\n    - instance: test # 对应启动 canal server 时的 canal.destinations\n      groups:\n      - groupId: g1\n        outerAdapters:\n        - name: logger\n        \n  # 重点在这里，输出到 es 的定义      \n        - name: es7\n          hosts: http://192.168.1.194:9200 #172.22.0.2:9300 # 127.0.0.1:9200 for rest mode\n          properties:\n            mode: rest #transport # or rest\n            #security.auth: elastic:123456 #  only used for rest mode\n            cluster.name: es-docker-cluster # 在启动 es 集群的 docker-compose.yml里有\n  ```\n\n- 上面在 outerAdapters 里定义了 es7 ，则会加载 conf/es7 文件夹里的 yml 文件，\n\n  假设有 product.yml：\n\n  ```yaml\n  dataSourceKey: defaultDS\n  destination: test \n  groupId: g1\n  esMapping:\n    _index: product\n    _id: id\n    sql: \"select t.id, t.title, t.sub_title from product t\"\n    #  etlCondition: \"where t.c_time>={}\"\n    commitBatch: 3000\n  ```\n\n- 第一次要手工全量导入\n\n  ```shell\n  curl http://127.0.0.1:8081/etl/es7/product.yml -X POST\n  # 正常时会返回导入多少数据\n  ```\n\n  \n\n- 修改数据库表内容，看 es 里的数据是否改变，在 kibana 的 dev_tools 里运行\n  \n  ```\n  GET product/_search\n  ```\n  \n  \n\n","source":"_posts/canal-adapter配置.md","raw":"---\ntitle: canal-adapter配置\ndate: 2021-02-22 16:51:07\ncategories:\n  - 部署\n  - 攻略\ntags:\n  - 服务器\n---\n\n参考：<https://blog.csdn.net/jcmj123456/article/details/109705562>\n\n## MySQL\n\nMySQL 需开启 binlog 写入功能，并配置 binlog-format 为 ROW 模式\n\n```\n[mysqld]\nlog-bin=mysql-bin # 开启 binlog\nbinlog-format=ROW # 选择 ROW 模式\nserver_id=1 # 配置 MySQL replaction 需要\n```\n检查数据库是否打开上述开关  \n```sql\nshow variables like '%log_bin%'\nshow variables like 'binlog_format%';\n```\n\n创建 canal 账号，用于 canal 连接 MySQL， 该账号必须具有作为 MySQL slave 的权限，如使用已有账户，可直接使用 grant 命令授权\n\n```sql\nCREATE USER canal IDENTIFIED BY 'canal';  \nGRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';\n-- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;\nFLUSH PRIVILEGES;\n```\n\n假设有数据库表 `product`\n\n```\n\nCREATE TABLE `product`  (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `title` varchar(255),\n  `sub_title` varchar(255),\n  PRIMARY KEY (`id`)\n)\n```\n\n\n\n## Canal Server\n\n使用 docker 启动，参考<https://github.com/alibaba/canal/wiki/Docker-QuickStart>\n\n```shell\n# 下载脚本\nwget https://raw.githubusercontent.com/alibaba/canal/master/docker/run.sh \n\n# 构建一个destination name为test的队列\nsh run.sh -e canal.auto.scan=false \\\n\t\t  -e canal.destinations=test \\\n\t\t  -e canal.instance.master.address=127.0.0.1:3306  \\\n\t\t  -e canal.instance.dbUsername=canal  \\\n\t\t  -e canal.instance.dbPassword=canal  \\\n\t\t  -e canal.instance.connectionCharset=UTF-8 \\\n\t\t  -e canal.instance.tsdb.enable=true \\\n\t\t  -e canal.instance.gtidon=false\n# 最终会变为：docker run -d -it -h 0 {上面所有的 -e 参数} --name=canal-server --net=host -m 4096m canal/canal-server\n```\n\n\n\n## Elastic 设置\n\n先运行一个没有 xpack 功能的集群，版本是 7.10.2\n\n创建数据库表 product 对应的索引，在 kibana 的 dev_tools 里运行：\n\n```json\nPUT product\n{\n  \"mappings\": {\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\"\n      },\n      \"title\": {\n        \"type\": \"text\"\n      },\n      \"sub_title\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n```\n\n\n\n## Canal-Adapter 部署\n\n- 从 github 上下载并解压 release 包  <https://github.com/alibaba/canal/releases/download/canal-1.1.5/canal.adapter-1.1.5.tar.gz>\n\n- 由于发布包里的 ` client-adapter.es7x`有 bug，会出现 com.alibaba.druid.pool.DruidDataSource cannot be cast to com.alibaba.druid.pool.DruidDataSource  的 bug，见 [issue 3144](https://github.com/alibaba/canal/issues/3144)，需要重新编译：\n\n  - 下载源码 <https://github.com/alibaba/canal/archive/refs/tags/canal-1.1.5.tar.gz>\n  - 修改 client-adapter/escore 目录下的 pom.xml，在 druid 的依赖定义增加`<scope>provided</scope>`\n  - 在项目的**根目录**下编译。用新编译出来的 client-adapter.es7x-1.1.5-jar-with-dependencies.jar ，替换原来 plugin 目录下的\n\n- 配置 canal-adapter 的 conf/application.yml\n\n  ```yaml\n  canal.conf:\n    mode: tcp #tcp kafka rocketMQ rabbitMQ\n    consumerProperties:\n      # canal tcp consumer\n      canal.tcp.server.host: 127.0.0.1:11111\n    srcDataSources:\n      defaultDS:\n        url: jdbc:mysql://127.0.0.1:3306/{DBName}?useUnicode=true\n        username: canal\n        password: canal  \n    canalAdapters:\n    - instance: test # 对应启动 canal server 时的 canal.destinations\n      groups:\n      - groupId: g1\n        outerAdapters:\n        - name: logger\n        \n  # 重点在这里，输出到 es 的定义      \n        - name: es7\n          hosts: http://192.168.1.194:9200 #172.22.0.2:9300 # 127.0.0.1:9200 for rest mode\n          properties:\n            mode: rest #transport # or rest\n            #security.auth: elastic:123456 #  only used for rest mode\n            cluster.name: es-docker-cluster # 在启动 es 集群的 docker-compose.yml里有\n  ```\n\n- 上面在 outerAdapters 里定义了 es7 ，则会加载 conf/es7 文件夹里的 yml 文件，\n\n  假设有 product.yml：\n\n  ```yaml\n  dataSourceKey: defaultDS\n  destination: test \n  groupId: g1\n  esMapping:\n    _index: product\n    _id: id\n    sql: \"select t.id, t.title, t.sub_title from product t\"\n    #  etlCondition: \"where t.c_time>={}\"\n    commitBatch: 3000\n  ```\n\n- 第一次要手工全量导入\n\n  ```shell\n  curl http://127.0.0.1:8081/etl/es7/product.yml -X POST\n  # 正常时会返回导入多少数据\n  ```\n\n  \n\n- 修改数据库表内容，看 es 里的数据是否改变，在 kibana 的 dev_tools 里运行\n  \n  ```\n  GET product/_search\n  ```\n  \n  \n\n","slug":"canal-adapter配置","published":1,"updated":"2021-07-30T03:21:32.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdm0006hkax8a5kfv8g","content":"<p>参考：<a href=\"https://blog.csdn.net/jcmj123456/article/details/109705562\">https://blog.csdn.net/jcmj123456/article/details/109705562</a></p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL 需开启 binlog 写入功能，并配置 binlog-format 为 ROW 模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin # 开启 binlog</span><br><span class=\"line\">binlog-format=ROW # 选择 ROW 模式</span><br><span class=\"line\">server_id=1 # 配置 MySQL replaction 需要</span><br></pre></td></tr></table></figure>\n<p>检查数据库是否打开上述开关  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%log_bin%&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;binlog_format%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>创建 canal 账号，用于 canal 连接 MySQL， 该账号必须具有作为 MySQL slave 的权限，如使用已有账户，可直接使用 grant 命令授权</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> canal IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;canal&#x27;</span>;  </span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;canal&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- GRANT ALL PRIVILEGES ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27; ;</span></span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<p>假设有数据库表 <code>product</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `product`  (</span><br><span class=\"line\">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `title` varchar(255),</span><br><span class=\"line\">  `sub_title` varchar(255),</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Canal-Server\"><a href=\"#Canal-Server\" class=\"headerlink\" title=\"Canal Server\"></a>Canal Server</h2><p>使用 docker 启动，参考<a href=\"https://github.com/alibaba/canal/wiki/Docker-QuickStart\">https://github.com/alibaba/canal/wiki/Docker-QuickStart</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载脚本</span></span><br><span class=\"line\">wget https://raw.githubusercontent.com/alibaba/canal/master/docker/run.sh </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 构建一个destination name为<span class=\"built_in\">test</span>的队列</span></span><br><span class=\"line\">sh run.sh -e canal.auto.scan=false \\</span><br><span class=\"line\">\t\t  -e canal.destinations=test \\</span><br><span class=\"line\">\t\t  -e canal.instance.master.address=127.0.0.1:3306  \\</span><br><span class=\"line\">\t\t  -e canal.instance.dbUsername=canal  \\</span><br><span class=\"line\">\t\t  -e canal.instance.dbPassword=canal  \\</span><br><span class=\"line\">\t\t  -e canal.instance.connectionCharset=UTF-8 \\</span><br><span class=\"line\">\t\t  -e canal.instance.tsdb.enable=true \\</span><br><span class=\"line\">\t\t  -e canal.instance.gtidon=false</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最终会变为：docker run -d -it -h 0 &#123;上面所有的 -e 参数&#125; --name=canal-server --net=host -m 4096m canal/canal-server</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Elastic-设置\"><a href=\"#Elastic-设置\" class=\"headerlink\" title=\"Elastic 设置\"></a>Elastic 设置</h2><p>先运行一个没有 xpack 功能的集群，版本是 7.10.2</p>\n<p>创建数据库表 product 对应的索引，在 kibana 的 dev_tools 里运行：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;title&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;sub_title&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Canal-Adapter-部署\"><a href=\"#Canal-Adapter-部署\" class=\"headerlink\" title=\"Canal-Adapter 部署\"></a>Canal-Adapter 部署</h2><ul>\n<li><p>从 github 上下载并解压 release 包  <a href=\"https://github.com/alibaba/canal/releases/download/canal-1.1.5/canal.adapter-1.1.5.tar.gz\">https://github.com/alibaba/canal/releases/download/canal-1.1.5/canal.adapter-1.1.5.tar.gz</a></p>\n</li>\n<li><p>由于发布包里的 <code> client-adapter.es7x</code>有 bug，会出现 com.alibaba.druid.pool.DruidDataSource cannot be cast to com.alibaba.druid.pool.DruidDataSource  的 bug，见 <a href=\"https://github.com/alibaba/canal/issues/3144\">issue 3144</a>，需要重新编译：</p>\n<ul>\n<li>下载源码 <a href=\"https://github.com/alibaba/canal/archive/refs/tags/canal-1.1.5.tar.gz\">https://github.com/alibaba/canal/archive/refs/tags/canal-1.1.5.tar.gz</a></li>\n<li>修改 client-adapter/escore 目录下的 pom.xml，在 druid 的依赖定义增加<code>&lt;scope&gt;provided&lt;/scope&gt;</code></li>\n<li>在项目的<strong>根目录</strong>下编译。用新编译出来的 client-adapter.es7x-1.1.5-jar-with-dependencies.jar ，替换原来 plugin 目录下的</li>\n</ul>\n</li>\n<li><p>配置 canal-adapter 的 conf/application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">canal.conf:</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">tcp</span> <span class=\"comment\">#tcp kafka rocketMQ rabbitMQ</span></span><br><span class=\"line\">  <span class=\"attr\">consumerProperties:</span></span><br><span class=\"line\">    <span class=\"comment\"># canal tcp consumer</span></span><br><span class=\"line\">    <span class=\"attr\">canal.tcp.server.host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:11111</span></span><br><span class=\"line\">  <span class=\"attr\">srcDataSources:</span></span><br><span class=\"line\">    <span class=\"attr\">defaultDS:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/&#123;DBName&#125;?useUnicode=true</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">canal</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">canal</span>  </span><br><span class=\"line\">  <span class=\"attr\">canalAdapters:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">instance:</span> <span class=\"string\">test</span> <span class=\"comment\"># 对应启动 canal server 时的 canal.destinations</span></span><br><span class=\"line\">    <span class=\"attr\">groups:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">groupId:</span> <span class=\"string\">g1</span></span><br><span class=\"line\">      <span class=\"attr\">outerAdapters:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logger</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># 重点在这里，输出到 es 的定义      </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">es7</span></span><br><span class=\"line\">        <span class=\"attr\">hosts:</span> <span class=\"string\">http://192.168.1.194:9200</span> <span class=\"comment\">#172.22.0.2:9300 # 127.0.0.1:9200 for rest mode</span></span><br><span class=\"line\">        <span class=\"attr\">properties:</span></span><br><span class=\"line\">          <span class=\"attr\">mode:</span> <span class=\"string\">rest</span> <span class=\"comment\">#transport # or rest</span></span><br><span class=\"line\">          <span class=\"comment\">#security.auth: elastic:123456 #  only used for rest mode</span></span><br><span class=\"line\">          <span class=\"attr\">cluster.name:</span> <span class=\"string\">es-docker-cluster</span> <span class=\"comment\"># 在启动 es 集群的 docker-compose.yml里有</span></span><br></pre></td></tr></table></figure></li>\n<li><p>上面在 outerAdapters 里定义了 es7 ，则会加载 conf/es7 文件夹里的 yml 文件，</p>\n<p>假设有 product.yml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dataSourceKey:</span> <span class=\"string\">defaultDS</span></span><br><span class=\"line\"><span class=\"attr\">destination:</span> <span class=\"string\">test</span> </span><br><span class=\"line\"><span class=\"attr\">groupId:</span> <span class=\"string\">g1</span></span><br><span class=\"line\"><span class=\"attr\">esMapping:</span></span><br><span class=\"line\">  <span class=\"attr\">_index:</span> <span class=\"string\">product</span></span><br><span class=\"line\">  <span class=\"attr\">_id:</span> <span class=\"string\">id</span></span><br><span class=\"line\">  <span class=\"attr\">sql:</span> <span class=\"string\">&quot;select t.id, t.title, t.sub_title from product t&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#  etlCondition: &quot;where t.c_time&gt;=&#123;&#125;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">commitBatch:</span> <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure></li>\n<li><p>第一次要手工全量导入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1:8081/etl/es7/product.yml -X POST</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 正常时会返回导入多少数据</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改数据库表内容，看 es 里的数据是否改变，在 kibana 的 dev_tools 里运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET product/_search</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>参考：<a href=\"https://blog.csdn.net/jcmj123456/article/details/109705562\">https://blog.csdn.net/jcmj123456/article/details/109705562</a></p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL 需开启 binlog 写入功能，并配置 binlog-format 为 ROW 模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin # 开启 binlog</span><br><span class=\"line\">binlog-format=ROW # 选择 ROW 模式</span><br><span class=\"line\">server_id=1 # 配置 MySQL replaction 需要</span><br></pre></td></tr></table></figure>\n<p>检查数据库是否打开上述开关  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%log_bin%&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;binlog_format%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>创建 canal 账号，用于 canal 连接 MySQL， 该账号必须具有作为 MySQL slave 的权限，如使用已有账户，可直接使用 grant 命令授权</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> canal IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;canal&#x27;</span>;  </span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;canal&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- GRANT ALL PRIVILEGES ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27; ;</span></span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<p>假设有数据库表 <code>product</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `product`  (</span><br><span class=\"line\">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `title` varchar(255),</span><br><span class=\"line\">  `sub_title` varchar(255),</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Canal-Server\"><a href=\"#Canal-Server\" class=\"headerlink\" title=\"Canal Server\"></a>Canal Server</h2><p>使用 docker 启动，参考<a href=\"https://github.com/alibaba/canal/wiki/Docker-QuickStart\">https://github.com/alibaba/canal/wiki/Docker-QuickStart</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载脚本</span></span><br><span class=\"line\">wget https://raw.githubusercontent.com/alibaba/canal/master/docker/run.sh </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 构建一个destination name为<span class=\"built_in\">test</span>的队列</span></span><br><span class=\"line\">sh run.sh -e canal.auto.scan=false \\</span><br><span class=\"line\">\t\t  -e canal.destinations=test \\</span><br><span class=\"line\">\t\t  -e canal.instance.master.address=127.0.0.1:3306  \\</span><br><span class=\"line\">\t\t  -e canal.instance.dbUsername=canal  \\</span><br><span class=\"line\">\t\t  -e canal.instance.dbPassword=canal  \\</span><br><span class=\"line\">\t\t  -e canal.instance.connectionCharset=UTF-8 \\</span><br><span class=\"line\">\t\t  -e canal.instance.tsdb.enable=true \\</span><br><span class=\"line\">\t\t  -e canal.instance.gtidon=false</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最终会变为：docker run -d -it -h 0 &#123;上面所有的 -e 参数&#125; --name=canal-server --net=host -m 4096m canal/canal-server</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Elastic-设置\"><a href=\"#Elastic-设置\" class=\"headerlink\" title=\"Elastic 设置\"></a>Elastic 设置</h2><p>先运行一个没有 xpack 功能的集群，版本是 7.10.2</p>\n<p>创建数据库表 product 对应的索引，在 kibana 的 dev_tools 里运行：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;title&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;sub_title&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Canal-Adapter-部署\"><a href=\"#Canal-Adapter-部署\" class=\"headerlink\" title=\"Canal-Adapter 部署\"></a>Canal-Adapter 部署</h2><ul>\n<li><p>从 github 上下载并解压 release 包  <a href=\"https://github.com/alibaba/canal/releases/download/canal-1.1.5/canal.adapter-1.1.5.tar.gz\">https://github.com/alibaba/canal/releases/download/canal-1.1.5/canal.adapter-1.1.5.tar.gz</a></p>\n</li>\n<li><p>由于发布包里的 <code> client-adapter.es7x</code>有 bug，会出现 com.alibaba.druid.pool.DruidDataSource cannot be cast to com.alibaba.druid.pool.DruidDataSource  的 bug，见 <a href=\"https://github.com/alibaba/canal/issues/3144\">issue 3144</a>，需要重新编译：</p>\n<ul>\n<li>下载源码 <a href=\"https://github.com/alibaba/canal/archive/refs/tags/canal-1.1.5.tar.gz\">https://github.com/alibaba/canal/archive/refs/tags/canal-1.1.5.tar.gz</a></li>\n<li>修改 client-adapter/escore 目录下的 pom.xml，在 druid 的依赖定义增加<code>&lt;scope&gt;provided&lt;/scope&gt;</code></li>\n<li>在项目的<strong>根目录</strong>下编译。用新编译出来的 client-adapter.es7x-1.1.5-jar-with-dependencies.jar ，替换原来 plugin 目录下的</li>\n</ul>\n</li>\n<li><p>配置 canal-adapter 的 conf/application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">canal.conf:</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">tcp</span> <span class=\"comment\">#tcp kafka rocketMQ rabbitMQ</span></span><br><span class=\"line\">  <span class=\"attr\">consumerProperties:</span></span><br><span class=\"line\">    <span class=\"comment\"># canal tcp consumer</span></span><br><span class=\"line\">    <span class=\"attr\">canal.tcp.server.host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:11111</span></span><br><span class=\"line\">  <span class=\"attr\">srcDataSources:</span></span><br><span class=\"line\">    <span class=\"attr\">defaultDS:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/&#123;DBName&#125;?useUnicode=true</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">canal</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">canal</span>  </span><br><span class=\"line\">  <span class=\"attr\">canalAdapters:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">instance:</span> <span class=\"string\">test</span> <span class=\"comment\"># 对应启动 canal server 时的 canal.destinations</span></span><br><span class=\"line\">    <span class=\"attr\">groups:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">groupId:</span> <span class=\"string\">g1</span></span><br><span class=\"line\">      <span class=\"attr\">outerAdapters:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logger</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># 重点在这里，输出到 es 的定义      </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">es7</span></span><br><span class=\"line\">        <span class=\"attr\">hosts:</span> <span class=\"string\">http://192.168.1.194:9200</span> <span class=\"comment\">#172.22.0.2:9300 # 127.0.0.1:9200 for rest mode</span></span><br><span class=\"line\">        <span class=\"attr\">properties:</span></span><br><span class=\"line\">          <span class=\"attr\">mode:</span> <span class=\"string\">rest</span> <span class=\"comment\">#transport # or rest</span></span><br><span class=\"line\">          <span class=\"comment\">#security.auth: elastic:123456 #  only used for rest mode</span></span><br><span class=\"line\">          <span class=\"attr\">cluster.name:</span> <span class=\"string\">es-docker-cluster</span> <span class=\"comment\"># 在启动 es 集群的 docker-compose.yml里有</span></span><br></pre></td></tr></table></figure></li>\n<li><p>上面在 outerAdapters 里定义了 es7 ，则会加载 conf/es7 文件夹里的 yml 文件，</p>\n<p>假设有 product.yml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dataSourceKey:</span> <span class=\"string\">defaultDS</span></span><br><span class=\"line\"><span class=\"attr\">destination:</span> <span class=\"string\">test</span> </span><br><span class=\"line\"><span class=\"attr\">groupId:</span> <span class=\"string\">g1</span></span><br><span class=\"line\"><span class=\"attr\">esMapping:</span></span><br><span class=\"line\">  <span class=\"attr\">_index:</span> <span class=\"string\">product</span></span><br><span class=\"line\">  <span class=\"attr\">_id:</span> <span class=\"string\">id</span></span><br><span class=\"line\">  <span class=\"attr\">sql:</span> <span class=\"string\">&quot;select t.id, t.title, t.sub_title from product t&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#  etlCondition: &quot;where t.c_time&gt;=&#123;&#125;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">commitBatch:</span> <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure></li>\n<li><p>第一次要手工全量导入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1:8081/etl/es7/product.yml -X POST</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 正常时会返回导入多少数据</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改数据库表内容，看 es 里的数据是否改变，在 kibana 的 dev_tools 里运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET product/_search</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"mall4j部署说明","date":"2021-07-29T08:51:07.000Z","_content":"\n参考官方文档：https://gitee.com/gz-yami/mall4j/wikis\n\n\n\n本文假定在服务器 192.168.1.70 上编译运行 Java 接口项目、管理后台网页项目  \n\n在本地 PC 机运行运行微信端、uni-app 端代码\n\n\n\n## 一、下载代码\n\n### 主程序代码  \n\n目录里已包含应用接口（yami-shop-api）、管理后台接口（yami-shop-admin）、管理后台前端（mall4v）、小程序（mall4uni）  代码\n\n```\ngit clone https://gitee.com/gz-yami/mall4j.git\n# commit id 5d536f641f1737d4ace00637780744b51bf06bb1\n```\n\n\n\n### 管理后台代码\n\n目录里的代码，和主程序目录的 mall4v 子目录没什么区别\n\n```\ngit clone https://gitee.com/gz-yami/mall4v\n# commit id b6f56bf4cb13061bf838d13c05511bf5e2f5597d\n```\n\n\n\n## 二、部署数据库 MySQL\n\n1. 使用 docker-compose 部署即可。\n2. 启动前把主程序代码目录里的 `mall4j/db/yami_shop.sql` 放到 initdb 下，第一次启动时会初始化数据库\n\ndocker-compose.yml:\n\n```yaml\nversion: '3'\nservices:\n  mysql:\n    restart: always\n    image: mysql:5.7.16\n    volumes:\n      - ./mysql_data:/var/lib/mysql\n      - ./my.cnf:/etc/my.cnf\n      #  数据库还原目录 可将需要还原的sql文件放在这里\n      - ./initdb:/docker-entrypoint-initdb.d\n    environment:\n      - \"MYSQL_ROOT_PASSWORD=root\"\n      # yami 会自动获得 yami_shops 的权限\n      - \"MYSQL_DATABASE=yami_shops\"\n      - \"MYSQL_USER=yami\"\n      - \"MYSQL_PASSWORD=yamipasswd\"\n      - \"TZ=Asia/Shanghai\"\n    ports:\n      - 3306:3306\nnetworks:\n    default:\n        external:\n            name: mall4j_network\n```\n\nmy.cnf\n\n```\n[mysqld]\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\nlower_case_table_names=1\n\n### optional configurations ###\n# enable binlog\n#log-bin=mysql-bin\n#binlog-format=ROW\n# neccessary for MySQL replaction and should be unique\n#server_id=1\n```\n\n\n\n### 遇到的问题\n\nQ: UniAPP 客户端注意账号时数据库报错\n\n> \\### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'login_password' at row 1\n\nA： `tz_user` 表的 `login_password` 只有 50字节，改为 128 字节\n\n\n\n## 三、部署 Redis\n\n使用 docker-compose 部署即可。不设置密码\n\n```yaml\n# run it with project name \"tiac\": docker-compose -p tiac up -d\n# more instructions from https://hub.docker.com/_/redis?tab=description&page=1&ordering=last_updated\n# config file: /usr/local/etc/redis/redis.conf\n# 使用自定义的 command 打开数据持久化，注意要映射 /data 目录（镜像默认启动命令是 redis-server），可选：--requirepass \"mypassword\"\n\nversion: '3'\nservices:\n  redis:\n    restart: always\n    image: redis:6.0\n    environment:\n      - \"TZ=Asia/Shanghai\"\n    command:  [redis-server, '--appendonly', 'yes']\n    volumes:\n      - ./data:/data\n    ports:\n      - 6379:6379\nnetworks:\n    default:\n        external:\n            name: mall4j_network\n```\n\n\n\n## 四、编译运行接口项目\n\n<font color=red>注意 JDK 版本，官方要求为 JDK 8 。实测 Oracle JDK 1.8.0*221 不可以，OpenJDK 1.8.0*292 可以。</font>\n\n\n### 修改管理后台接口配置\n\n```\n# vim yami-shop-admin/src/main/resources/application-prod.yml\n  // 修改数据库连接信息\n   datasource:\n    ...（省略）\n    username: yami\n    password: yamipasswd\n    \n# vim yami-shop-admin/src/main/resources/log4j2_prod.xml\n  //（可选）修改日志目录 PROJECT_PATH\n```\n\n\n\n### 修改应用接口配置\n\n```\n# vim yami-shop-api/src/main/resources/application-prod.yml\n  //修改数据库连接信息\n   datasource:\n    ...（省略）\n    username: yami\n    password: yamipasswd\n\n# vim yami-shop-api/src/main/resources/log4j2_prod.xml\n  //（可选）修改日志目录 PROJECT_PATH\n```\n\n\n\n### 修改微信小程序的 appid 和 secret\n\n```\n# vim yami-shop-mp/src/main/resources/ma.properties\nma.appid=\nma.secret=\n```\n\n<font color=red>注意，即使运行 uniapp，不是调试小程序代码，也要填这个信息（查看本文 “小程序” ）</font> \n\n\n\n### 编译项目\n\n```\nmvn clean package -DskipTests\n```\n\n\n\n### 运行管理后台接口项目\n\n```\njava -jar -Dspring.profiles.active=prod,quartz yami-shop-admin/target/yami-shop-admin-0.0.1-SNAPSHOT.jar\n# 打开项目自带的 swagger 查验\ncurl http://localhost:8111/doc.html\n```\n\n### 运行应用接口项目\n\n```\njava -jar -Dspring.profiles.active=prod yami-shop-api/target/yami-shop-api-0.0.1-SNAPSHOT.jar \n# 打开项目自带的 swagger 查验\ncurl http://localhost:8112/doc.html\n```\n\n\n\n## 五、编译管理台网站前端\n\n进入 mall4v 项目\n\n```\nnpm config set registry https://registry.npm.taobao.org\nnpm install \nnpm run build\n```\n\n编译后的文件在 dist 子目录下，修改配置文件\n\n```\n# vim dist/config/index.js\n// api接口请求地址\n  window.SITE_CONFIG['baseUrl'] = 'http://192.168.1.70/apis'\n```\n\n在 nginx 部署前端页面，并配置接口地址转发到前面的 `管理后台接口` 项目：\n\n```\nserver {\n        listen       80;\n        server_name  localhost;\n\t\troot /data/mall4j/mall4v/dist;\n\n\tlocation /apis {\n\t\trewrite  ^/apis/(.*)$ /$1 break;\n\t\tproxy_pass   http://127.0.0.1:8111;\n        }\n}\n```\n\n管理后台的网站即 http://192.168.1.70\n\n\n\n## 六、小程序项目\n\n使用微信官方的开发工具 [wechat_devtools](https://dldir1.qq.com/WechatWebDev/release/p-ae42ee2cde4d42ee80ac60b35f183a99/wechat_devtools_1.05.2107090_x64.exe) 导入项目（mall4m 目录），界面会提示设置小程序的 appid，使用自动生成的 \"xxx测试\" 号即可\n\n<font color=red>注意，此小程序的 appid，要填到接口项目的配置文件</font> \n\n```\n# 修改 mall4m/utils/config.js\n domain = \"http://192.168.1.70:81\"; //统一接口域名，测试环境\n```\n\n\n\n## 七、uni-app 项目\n\n使用官方的开发工具 [HBuilder X](https://download1.dcloud.net.cn/download/HBuilderX.3.1.22.20210709.full.zip) 导入项目 mall4juni  \n\n### 修改配置文件\n\n```\n# 修改 utils/config.js\nvar mpAppId = '你的微信app id，与后台接口参数填的一致'\nvar domain = \"http://192.168.1.70:8112\"; //统一接口域名，测试环境\nvar wsDomain = \"ws://192.168.1.70:8112\"; //统一接口域名，测试环境\n```\n\n### 修改工具类代码\n\n```\n#修改 http.js ，原代码第33行，Authorization 的注释换掉，最终效果如下：\n  wx.request({\n    ...\n    header: {\n      // 'content-type': params.method == \"GET\" ? 'application/x-www-form-urlencoded' : 'application/json;charset=utf-8',\n       'Authorization': params.login ? undefined : uni.getStorageSync('token')\n\t  // 'Authorization': !needToken ? undefined : uni.getStorageSync('token') || uni.getStorageSync('tempToken'),\n    },\n```\n\n### 运行\n\n开发工具菜单栏 -> 运行 -> 运行到内置浏览器\n\n说明：HBuilder X 的内置浏览器，放开了跨域的限制，便于调试\n\n\n\n\n\n\n\n","source":"_posts/mall4j部署说明.md","raw":"---\ntitle: mall4j部署说明\ndate: 2021-07-29 16:51:07\ncategories:\n  - 部署\n  - 攻略\ntags:\n  - 服务器\n---\n\n参考官方文档：https://gitee.com/gz-yami/mall4j/wikis\n\n\n\n本文假定在服务器 192.168.1.70 上编译运行 Java 接口项目、管理后台网页项目  \n\n在本地 PC 机运行运行微信端、uni-app 端代码\n\n\n\n## 一、下载代码\n\n### 主程序代码  \n\n目录里已包含应用接口（yami-shop-api）、管理后台接口（yami-shop-admin）、管理后台前端（mall4v）、小程序（mall4uni）  代码\n\n```\ngit clone https://gitee.com/gz-yami/mall4j.git\n# commit id 5d536f641f1737d4ace00637780744b51bf06bb1\n```\n\n\n\n### 管理后台代码\n\n目录里的代码，和主程序目录的 mall4v 子目录没什么区别\n\n```\ngit clone https://gitee.com/gz-yami/mall4v\n# commit id b6f56bf4cb13061bf838d13c05511bf5e2f5597d\n```\n\n\n\n## 二、部署数据库 MySQL\n\n1. 使用 docker-compose 部署即可。\n2. 启动前把主程序代码目录里的 `mall4j/db/yami_shop.sql` 放到 initdb 下，第一次启动时会初始化数据库\n\ndocker-compose.yml:\n\n```yaml\nversion: '3'\nservices:\n  mysql:\n    restart: always\n    image: mysql:5.7.16\n    volumes:\n      - ./mysql_data:/var/lib/mysql\n      - ./my.cnf:/etc/my.cnf\n      #  数据库还原目录 可将需要还原的sql文件放在这里\n      - ./initdb:/docker-entrypoint-initdb.d\n    environment:\n      - \"MYSQL_ROOT_PASSWORD=root\"\n      # yami 会自动获得 yami_shops 的权限\n      - \"MYSQL_DATABASE=yami_shops\"\n      - \"MYSQL_USER=yami\"\n      - \"MYSQL_PASSWORD=yamipasswd\"\n      - \"TZ=Asia/Shanghai\"\n    ports:\n      - 3306:3306\nnetworks:\n    default:\n        external:\n            name: mall4j_network\n```\n\nmy.cnf\n\n```\n[mysqld]\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\nlower_case_table_names=1\n\n### optional configurations ###\n# enable binlog\n#log-bin=mysql-bin\n#binlog-format=ROW\n# neccessary for MySQL replaction and should be unique\n#server_id=1\n```\n\n\n\n### 遇到的问题\n\nQ: UniAPP 客户端注意账号时数据库报错\n\n> \\### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'login_password' at row 1\n\nA： `tz_user` 表的 `login_password` 只有 50字节，改为 128 字节\n\n\n\n## 三、部署 Redis\n\n使用 docker-compose 部署即可。不设置密码\n\n```yaml\n# run it with project name \"tiac\": docker-compose -p tiac up -d\n# more instructions from https://hub.docker.com/_/redis?tab=description&page=1&ordering=last_updated\n# config file: /usr/local/etc/redis/redis.conf\n# 使用自定义的 command 打开数据持久化，注意要映射 /data 目录（镜像默认启动命令是 redis-server），可选：--requirepass \"mypassword\"\n\nversion: '3'\nservices:\n  redis:\n    restart: always\n    image: redis:6.0\n    environment:\n      - \"TZ=Asia/Shanghai\"\n    command:  [redis-server, '--appendonly', 'yes']\n    volumes:\n      - ./data:/data\n    ports:\n      - 6379:6379\nnetworks:\n    default:\n        external:\n            name: mall4j_network\n```\n\n\n\n## 四、编译运行接口项目\n\n<font color=red>注意 JDK 版本，官方要求为 JDK 8 。实测 Oracle JDK 1.8.0*221 不可以，OpenJDK 1.8.0*292 可以。</font>\n\n\n### 修改管理后台接口配置\n\n```\n# vim yami-shop-admin/src/main/resources/application-prod.yml\n  // 修改数据库连接信息\n   datasource:\n    ...（省略）\n    username: yami\n    password: yamipasswd\n    \n# vim yami-shop-admin/src/main/resources/log4j2_prod.xml\n  //（可选）修改日志目录 PROJECT_PATH\n```\n\n\n\n### 修改应用接口配置\n\n```\n# vim yami-shop-api/src/main/resources/application-prod.yml\n  //修改数据库连接信息\n   datasource:\n    ...（省略）\n    username: yami\n    password: yamipasswd\n\n# vim yami-shop-api/src/main/resources/log4j2_prod.xml\n  //（可选）修改日志目录 PROJECT_PATH\n```\n\n\n\n### 修改微信小程序的 appid 和 secret\n\n```\n# vim yami-shop-mp/src/main/resources/ma.properties\nma.appid=\nma.secret=\n```\n\n<font color=red>注意，即使运行 uniapp，不是调试小程序代码，也要填这个信息（查看本文 “小程序” ）</font> \n\n\n\n### 编译项目\n\n```\nmvn clean package -DskipTests\n```\n\n\n\n### 运行管理后台接口项目\n\n```\njava -jar -Dspring.profiles.active=prod,quartz yami-shop-admin/target/yami-shop-admin-0.0.1-SNAPSHOT.jar\n# 打开项目自带的 swagger 查验\ncurl http://localhost:8111/doc.html\n```\n\n### 运行应用接口项目\n\n```\njava -jar -Dspring.profiles.active=prod yami-shop-api/target/yami-shop-api-0.0.1-SNAPSHOT.jar \n# 打开项目自带的 swagger 查验\ncurl http://localhost:8112/doc.html\n```\n\n\n\n## 五、编译管理台网站前端\n\n进入 mall4v 项目\n\n```\nnpm config set registry https://registry.npm.taobao.org\nnpm install \nnpm run build\n```\n\n编译后的文件在 dist 子目录下，修改配置文件\n\n```\n# vim dist/config/index.js\n// api接口请求地址\n  window.SITE_CONFIG['baseUrl'] = 'http://192.168.1.70/apis'\n```\n\n在 nginx 部署前端页面，并配置接口地址转发到前面的 `管理后台接口` 项目：\n\n```\nserver {\n        listen       80;\n        server_name  localhost;\n\t\troot /data/mall4j/mall4v/dist;\n\n\tlocation /apis {\n\t\trewrite  ^/apis/(.*)$ /$1 break;\n\t\tproxy_pass   http://127.0.0.1:8111;\n        }\n}\n```\n\n管理后台的网站即 http://192.168.1.70\n\n\n\n## 六、小程序项目\n\n使用微信官方的开发工具 [wechat_devtools](https://dldir1.qq.com/WechatWebDev/release/p-ae42ee2cde4d42ee80ac60b35f183a99/wechat_devtools_1.05.2107090_x64.exe) 导入项目（mall4m 目录），界面会提示设置小程序的 appid，使用自动生成的 \"xxx测试\" 号即可\n\n<font color=red>注意，此小程序的 appid，要填到接口项目的配置文件</font> \n\n```\n# 修改 mall4m/utils/config.js\n domain = \"http://192.168.1.70:81\"; //统一接口域名，测试环境\n```\n\n\n\n## 七、uni-app 项目\n\n使用官方的开发工具 [HBuilder X](https://download1.dcloud.net.cn/download/HBuilderX.3.1.22.20210709.full.zip) 导入项目 mall4juni  \n\n### 修改配置文件\n\n```\n# 修改 utils/config.js\nvar mpAppId = '你的微信app id，与后台接口参数填的一致'\nvar domain = \"http://192.168.1.70:8112\"; //统一接口域名，测试环境\nvar wsDomain = \"ws://192.168.1.70:8112\"; //统一接口域名，测试环境\n```\n\n### 修改工具类代码\n\n```\n#修改 http.js ，原代码第33行，Authorization 的注释换掉，最终效果如下：\n  wx.request({\n    ...\n    header: {\n      // 'content-type': params.method == \"GET\" ? 'application/x-www-form-urlencoded' : 'application/json;charset=utf-8',\n       'Authorization': params.login ? undefined : uni.getStorageSync('token')\n\t  // 'Authorization': !needToken ? undefined : uni.getStorageSync('token') || uni.getStorageSync('tempToken'),\n    },\n```\n\n### 运行\n\n开发工具菜单栏 -> 运行 -> 运行到内置浏览器\n\n说明：HBuilder X 的内置浏览器，放开了跨域的限制，便于调试\n\n\n\n\n\n\n\n","slug":"mall4j部署说明","published":1,"updated":"2021-07-30T03:20:46.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdn0007hkaxcpzz4n8k","content":"<p>参考官方文档：<a href=\"https://gitee.com/gz-yami/mall4j/wikis\">https://gitee.com/gz-yami/mall4j/wikis</a></p>\n<p>本文假定在服务器 192.168.1.70 上编译运行 Java 接口项目、管理后台网页项目  </p>\n<p>在本地 PC 机运行运行微信端、uni-app 端代码</p>\n<h2 id=\"一、下载代码\"><a href=\"#一、下载代码\" class=\"headerlink\" title=\"一、下载代码\"></a>一、下载代码</h2><h3 id=\"主程序代码\"><a href=\"#主程序代码\" class=\"headerlink\" title=\"主程序代码\"></a>主程序代码</h3><p>目录里已包含应用接口（yami-shop-api）、管理后台接口（yami-shop-admin）、管理后台前端（mall4v）、小程序（mall4uni）  代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/gz-yami/mall4j.git</span><br><span class=\"line\"># commit id 5d536f641f1737d4ace00637780744b51bf06bb1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"管理后台代码\"><a href=\"#管理后台代码\" class=\"headerlink\" title=\"管理后台代码\"></a>管理后台代码</h3><p>目录里的代码，和主程序目录的 mall4v 子目录没什么区别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/gz-yami/mall4v</span><br><span class=\"line\"># commit id b6f56bf4cb13061bf838d13c05511bf5e2f5597d</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二、部署数据库-MySQL\"><a href=\"#二、部署数据库-MySQL\" class=\"headerlink\" title=\"二、部署数据库 MySQL\"></a>二、部署数据库 MySQL</h2><ol>\n<li>使用 docker-compose 部署即可。</li>\n<li>启动前把主程序代码目录里的 <code>mall4j/db/yami_shop.sql</code> 放到 initdb 下，第一次启动时会初始化数据库</li>\n</ol>\n<p>docker-compose.yml:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7.16</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./mysql_data:/var/lib/mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./my.cnf:/etc/my.cnf</span></span><br><span class=\"line\">      <span class=\"comment\">#  数据库还原目录 可将需要还原的sql文件放在这里</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./initdb:/docker-entrypoint-initdb.d</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;MYSQL_ROOT_PASSWORD=root&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># yami 会自动获得 yami_shops 的权限</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;MYSQL_DATABASE=yami_shops&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;MYSQL_USER=yami&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;MYSQL_PASSWORD=yamipasswd&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;TZ=Asia/Shanghai&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">external:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">mall4j_network</span></span><br></pre></td></tr></table></figure>\n\n<p>my.cnf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class=\"line\">lower_case_table_names=1</span><br><span class=\"line\"></span><br><span class=\"line\">### optional configurations ###</span><br><span class=\"line\"># enable binlog</span><br><span class=\"line\">#log-bin=mysql-bin</span><br><span class=\"line\">#binlog-format=ROW</span><br><span class=\"line\"># neccessary for MySQL replaction and should be unique</span><br><span class=\"line\">#server_id=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>Q: UniAPP 客户端注意账号时数据库报错</p>\n<blockquote>\n<p>### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column ‘login_password’ at row 1</p>\n</blockquote>\n<p>A： <code>tz_user</code> 表的 <code>login_password</code> 只有 50字节，改为 128 字节</p>\n<h2 id=\"三、部署-Redis\"><a href=\"#三、部署-Redis\" class=\"headerlink\" title=\"三、部署 Redis\"></a>三、部署 Redis</h2><p>使用 docker-compose 部署即可。不设置密码</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># run it with project name &quot;tiac&quot;: docker-compose -p tiac up -d</span></span><br><span class=\"line\"><span class=\"comment\"># more instructions from https://hub.docker.com/_/redis?tab=description&amp;page=1&amp;ordering=last_updated</span></span><br><span class=\"line\"><span class=\"comment\"># config file: /usr/local/etc/redis/redis.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 使用自定义的 command 打开数据持久化，注意要映射 /data 目录（镜像默认启动命令是 redis-server），可选：--requirepass &quot;mypassword&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:6.0</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;TZ=Asia/Shanghai&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span>  [<span class=\"string\">redis-server</span>, <span class=\"string\">&#x27;--appendonly&#x27;</span>, <span class=\"string\">&#x27;yes&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data:/data</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">external:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">mall4j_network</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四、编译运行接口项目\"><a href=\"#四、编译运行接口项目\" class=\"headerlink\" title=\"四、编译运行接口项目\"></a>四、编译运行接口项目</h2><p><font color=red>注意 JDK 版本，官方要求为 JDK 8 。实测 Oracle JDK 1.8.0<em>221 不可以，OpenJDK 1.8.0</em>292 可以。</font></p>\n<h3 id=\"修改管理后台接口配置\"><a href=\"#修改管理后台接口配置\" class=\"headerlink\" title=\"修改管理后台接口配置\"></a>修改管理后台接口配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim yami-shop-admin/src/main/resources/application-prod.yml</span><br><span class=\"line\">  // 修改数据库连接信息</span><br><span class=\"line\">   datasource:</span><br><span class=\"line\">    ...（省略）</span><br><span class=\"line\">    username: yami</span><br><span class=\"line\">    password: yamipasswd</span><br><span class=\"line\">    </span><br><span class=\"line\"># vim yami-shop-admin/src/main/resources/log4j2_prod.xml</span><br><span class=\"line\">  //（可选）修改日志目录 PROJECT_PATH</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改应用接口配置\"><a href=\"#修改应用接口配置\" class=\"headerlink\" title=\"修改应用接口配置\"></a>修改应用接口配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim yami-shop-api/src/main/resources/application-prod.yml</span><br><span class=\"line\">  //修改数据库连接信息</span><br><span class=\"line\">   datasource:</span><br><span class=\"line\">    ...（省略）</span><br><span class=\"line\">    username: yami</span><br><span class=\"line\">    password: yamipasswd</span><br><span class=\"line\"></span><br><span class=\"line\"># vim yami-shop-api/src/main/resources/log4j2_prod.xml</span><br><span class=\"line\">  //（可选）修改日志目录 PROJECT_PATH</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改微信小程序的-appid-和-secret\"><a href=\"#修改微信小程序的-appid-和-secret\" class=\"headerlink\" title=\"修改微信小程序的 appid 和 secret\"></a>修改微信小程序的 appid 和 secret</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim yami-shop-mp/src/main/resources/ma.properties</span><br><span class=\"line\">ma.appid=</span><br><span class=\"line\">ma.secret=</span><br></pre></td></tr></table></figure>\n\n<p><font color=red>注意，即使运行 uniapp，不是调试小程序代码，也要填这个信息（查看本文 “小程序” ）</font> </p>\n<h3 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"运行管理后台接口项目\"><a href=\"#运行管理后台接口项目\" class=\"headerlink\" title=\"运行管理后台接口项目\"></a>运行管理后台接口项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar -Dspring.profiles.active=prod,quartz yami-shop-admin/target/yami-shop-admin-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\"># 打开项目自带的 swagger 查验</span><br><span class=\"line\">curl http://localhost:8111/doc.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行应用接口项目\"><a href=\"#运行应用接口项目\" class=\"headerlink\" title=\"运行应用接口项目\"></a>运行应用接口项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar -Dspring.profiles.active=prod yami-shop-api/target/yami-shop-api-0.0.1-SNAPSHOT.jar </span><br><span class=\"line\"># 打开项目自带的 swagger 查验</span><br><span class=\"line\">curl http://localhost:8112/doc.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"五、编译管理台网站前端\"><a href=\"#五、编译管理台网站前端\" class=\"headerlink\" title=\"五、编译管理台网站前端\"></a>五、编译管理台网站前端</h2><p>进入 mall4v 项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm install </span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p>编译后的文件在 dist 子目录下，修改配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim dist/config/index.js</span><br><span class=\"line\">// api接口请求地址</span><br><span class=\"line\">  window.SITE_CONFIG[&#x27;baseUrl&#x27;] = &#x27;http://192.168.1.70/apis&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在 nginx 部署前端页面，并配置接口地址转发到前面的 <code>管理后台接口</code> 项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">\t\troot /data/mall4j/mall4v/dist;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation /apis &#123;</span><br><span class=\"line\">\t\trewrite  ^/apis/(.*)$ /$1 break;</span><br><span class=\"line\">\t\tproxy_pass   http://127.0.0.1:8111;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>管理后台的网站即 <a href=\"http://192.168.1.70/\">http://192.168.1.70</a></p>\n<h2 id=\"六、小程序项目\"><a href=\"#六、小程序项目\" class=\"headerlink\" title=\"六、小程序项目\"></a>六、小程序项目</h2><p>使用微信官方的开发工具 <a href=\"https://dldir1.qq.com/WechatWebDev/release/p-ae42ee2cde4d42ee80ac60b35f183a99/wechat_devtools_1.05.2107090_x64.exe\">wechat_devtools</a> 导入项目（mall4m 目录），界面会提示设置小程序的 appid，使用自动生成的 “xxx测试” 号即可</p>\n<p><font color=red>注意，此小程序的 appid，要填到接口项目的配置文件</font> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改 mall4m/utils/config.js</span><br><span class=\"line\"> domain = &quot;http://192.168.1.70:81&quot;; //统一接口域名，测试环境</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"七、uni-app-项目\"><a href=\"#七、uni-app-项目\" class=\"headerlink\" title=\"七、uni-app 项目\"></a>七、uni-app 项目</h2><p>使用官方的开发工具 <a href=\"https://download1.dcloud.net.cn/download/HBuilderX.3.1.22.20210709.full.zip\">HBuilder X</a> 导入项目 mall4juni  </p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改 utils/config.js</span><br><span class=\"line\">var mpAppId = &#x27;你的微信app id，与后台接口参数填的一致&#x27;</span><br><span class=\"line\">var domain = &quot;http://192.168.1.70:8112&quot;; //统一接口域名，测试环境</span><br><span class=\"line\">var wsDomain = &quot;ws://192.168.1.70:8112&quot;; //统一接口域名，测试环境</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改工具类代码\"><a href=\"#修改工具类代码\" class=\"headerlink\" title=\"修改工具类代码\"></a>修改工具类代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改 http.js ，原代码第33行，Authorization 的注释换掉，最终效果如下：</span><br><span class=\"line\">  wx.request(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    header: &#123;</span><br><span class=\"line\">      // &#x27;content-type&#x27;: params.method == &quot;GET&quot; ? &#x27;application/x-www-form-urlencoded&#x27; : &#x27;application/json;charset=utf-8&#x27;,</span><br><span class=\"line\">       &#x27;Authorization&#x27;: params.login ? undefined : uni.getStorageSync(&#x27;token&#x27;)</span><br><span class=\"line\">\t  // &#x27;Authorization&#x27;: !needToken ? undefined : uni.getStorageSync(&#x27;token&#x27;) || uni.getStorageSync(&#x27;tempToken&#x27;),</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>开发工具菜单栏 -&gt; 运行 -&gt; 运行到内置浏览器</p>\n<p>说明：HBuilder X 的内置浏览器，放开了跨域的限制，便于调试</p>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>参考官方文档：<a href=\"https://gitee.com/gz-yami/mall4j/wikis\">https://gitee.com/gz-yami/mall4j/wikis</a></p>\n<p>本文假定在服务器 192.168.1.70 上编译运行 Java 接口项目、管理后台网页项目  </p>\n<p>在本地 PC 机运行运行微信端、uni-app 端代码</p>\n<h2 id=\"一、下载代码\"><a href=\"#一、下载代码\" class=\"headerlink\" title=\"一、下载代码\"></a>一、下载代码</h2><h3 id=\"主程序代码\"><a href=\"#主程序代码\" class=\"headerlink\" title=\"主程序代码\"></a>主程序代码</h3><p>目录里已包含应用接口（yami-shop-api）、管理后台接口（yami-shop-admin）、管理后台前端（mall4v）、小程序（mall4uni）  代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/gz-yami/mall4j.git</span><br><span class=\"line\"># commit id 5d536f641f1737d4ace00637780744b51bf06bb1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"管理后台代码\"><a href=\"#管理后台代码\" class=\"headerlink\" title=\"管理后台代码\"></a>管理后台代码</h3><p>目录里的代码，和主程序目录的 mall4v 子目录没什么区别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/gz-yami/mall4v</span><br><span class=\"line\"># commit id b6f56bf4cb13061bf838d13c05511bf5e2f5597d</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二、部署数据库-MySQL\"><a href=\"#二、部署数据库-MySQL\" class=\"headerlink\" title=\"二、部署数据库 MySQL\"></a>二、部署数据库 MySQL</h2><ol>\n<li>使用 docker-compose 部署即可。</li>\n<li>启动前把主程序代码目录里的 <code>mall4j/db/yami_shop.sql</code> 放到 initdb 下，第一次启动时会初始化数据库</li>\n</ol>\n<p>docker-compose.yml:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7.16</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./mysql_data:/var/lib/mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./my.cnf:/etc/my.cnf</span></span><br><span class=\"line\">      <span class=\"comment\">#  数据库还原目录 可将需要还原的sql文件放在这里</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./initdb:/docker-entrypoint-initdb.d</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;MYSQL_ROOT_PASSWORD=root&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># yami 会自动获得 yami_shops 的权限</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;MYSQL_DATABASE=yami_shops&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;MYSQL_USER=yami&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;MYSQL_PASSWORD=yamipasswd&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;TZ=Asia/Shanghai&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">external:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">mall4j_network</span></span><br></pre></td></tr></table></figure>\n\n<p>my.cnf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class=\"line\">lower_case_table_names=1</span><br><span class=\"line\"></span><br><span class=\"line\">### optional configurations ###</span><br><span class=\"line\"># enable binlog</span><br><span class=\"line\">#log-bin=mysql-bin</span><br><span class=\"line\">#binlog-format=ROW</span><br><span class=\"line\"># neccessary for MySQL replaction and should be unique</span><br><span class=\"line\">#server_id=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>Q: UniAPP 客户端注意账号时数据库报错</p>\n<blockquote>\n<p>### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column ‘login_password’ at row 1</p>\n</blockquote>\n<p>A： <code>tz_user</code> 表的 <code>login_password</code> 只有 50字节，改为 128 字节</p>\n<h2 id=\"三、部署-Redis\"><a href=\"#三、部署-Redis\" class=\"headerlink\" title=\"三、部署 Redis\"></a>三、部署 Redis</h2><p>使用 docker-compose 部署即可。不设置密码</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># run it with project name &quot;tiac&quot;: docker-compose -p tiac up -d</span></span><br><span class=\"line\"><span class=\"comment\"># more instructions from https://hub.docker.com/_/redis?tab=description&amp;page=1&amp;ordering=last_updated</span></span><br><span class=\"line\"><span class=\"comment\"># config file: /usr/local/etc/redis/redis.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 使用自定义的 command 打开数据持久化，注意要映射 /data 目录（镜像默认启动命令是 redis-server），可选：--requirepass &quot;mypassword&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:6.0</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;TZ=Asia/Shanghai&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span>  [<span class=\"string\">redis-server</span>, <span class=\"string\">&#x27;--appendonly&#x27;</span>, <span class=\"string\">&#x27;yes&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data:/data</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">external:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">mall4j_network</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四、编译运行接口项目\"><a href=\"#四、编译运行接口项目\" class=\"headerlink\" title=\"四、编译运行接口项目\"></a>四、编译运行接口项目</h2><p><font color=red>注意 JDK 版本，官方要求为 JDK 8 。实测 Oracle JDK 1.8.0<em>221 不可以，OpenJDK 1.8.0</em>292 可以。</font></p>\n<h3 id=\"修改管理后台接口配置\"><a href=\"#修改管理后台接口配置\" class=\"headerlink\" title=\"修改管理后台接口配置\"></a>修改管理后台接口配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim yami-shop-admin/src/main/resources/application-prod.yml</span><br><span class=\"line\">  // 修改数据库连接信息</span><br><span class=\"line\">   datasource:</span><br><span class=\"line\">    ...（省略）</span><br><span class=\"line\">    username: yami</span><br><span class=\"line\">    password: yamipasswd</span><br><span class=\"line\">    </span><br><span class=\"line\"># vim yami-shop-admin/src/main/resources/log4j2_prod.xml</span><br><span class=\"line\">  //（可选）修改日志目录 PROJECT_PATH</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改应用接口配置\"><a href=\"#修改应用接口配置\" class=\"headerlink\" title=\"修改应用接口配置\"></a>修改应用接口配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim yami-shop-api/src/main/resources/application-prod.yml</span><br><span class=\"line\">  //修改数据库连接信息</span><br><span class=\"line\">   datasource:</span><br><span class=\"line\">    ...（省略）</span><br><span class=\"line\">    username: yami</span><br><span class=\"line\">    password: yamipasswd</span><br><span class=\"line\"></span><br><span class=\"line\"># vim yami-shop-api/src/main/resources/log4j2_prod.xml</span><br><span class=\"line\">  //（可选）修改日志目录 PROJECT_PATH</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改微信小程序的-appid-和-secret\"><a href=\"#修改微信小程序的-appid-和-secret\" class=\"headerlink\" title=\"修改微信小程序的 appid 和 secret\"></a>修改微信小程序的 appid 和 secret</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim yami-shop-mp/src/main/resources/ma.properties</span><br><span class=\"line\">ma.appid=</span><br><span class=\"line\">ma.secret=</span><br></pre></td></tr></table></figure>\n\n<p><font color=red>注意，即使运行 uniapp，不是调试小程序代码，也要填这个信息（查看本文 “小程序” ）</font> </p>\n<h3 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"运行管理后台接口项目\"><a href=\"#运行管理后台接口项目\" class=\"headerlink\" title=\"运行管理后台接口项目\"></a>运行管理后台接口项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar -Dspring.profiles.active=prod,quartz yami-shop-admin/target/yami-shop-admin-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\"># 打开项目自带的 swagger 查验</span><br><span class=\"line\">curl http://localhost:8111/doc.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行应用接口项目\"><a href=\"#运行应用接口项目\" class=\"headerlink\" title=\"运行应用接口项目\"></a>运行应用接口项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar -Dspring.profiles.active=prod yami-shop-api/target/yami-shop-api-0.0.1-SNAPSHOT.jar </span><br><span class=\"line\"># 打开项目自带的 swagger 查验</span><br><span class=\"line\">curl http://localhost:8112/doc.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"五、编译管理台网站前端\"><a href=\"#五、编译管理台网站前端\" class=\"headerlink\" title=\"五、编译管理台网站前端\"></a>五、编译管理台网站前端</h2><p>进入 mall4v 项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm install </span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p>编译后的文件在 dist 子目录下，修改配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim dist/config/index.js</span><br><span class=\"line\">// api接口请求地址</span><br><span class=\"line\">  window.SITE_CONFIG[&#x27;baseUrl&#x27;] = &#x27;http://192.168.1.70/apis&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在 nginx 部署前端页面，并配置接口地址转发到前面的 <code>管理后台接口</code> 项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">\t\troot /data/mall4j/mall4v/dist;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation /apis &#123;</span><br><span class=\"line\">\t\trewrite  ^/apis/(.*)$ /$1 break;</span><br><span class=\"line\">\t\tproxy_pass   http://127.0.0.1:8111;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>管理后台的网站即 <a href=\"http://192.168.1.70/\">http://192.168.1.70</a></p>\n<h2 id=\"六、小程序项目\"><a href=\"#六、小程序项目\" class=\"headerlink\" title=\"六、小程序项目\"></a>六、小程序项目</h2><p>使用微信官方的开发工具 <a href=\"https://dldir1.qq.com/WechatWebDev/release/p-ae42ee2cde4d42ee80ac60b35f183a99/wechat_devtools_1.05.2107090_x64.exe\">wechat_devtools</a> 导入项目（mall4m 目录），界面会提示设置小程序的 appid，使用自动生成的 “xxx测试” 号即可</p>\n<p><font color=red>注意，此小程序的 appid，要填到接口项目的配置文件</font> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改 mall4m/utils/config.js</span><br><span class=\"line\"> domain = &quot;http://192.168.1.70:81&quot;; //统一接口域名，测试环境</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"七、uni-app-项目\"><a href=\"#七、uni-app-项目\" class=\"headerlink\" title=\"七、uni-app 项目\"></a>七、uni-app 项目</h2><p>使用官方的开发工具 <a href=\"https://download1.dcloud.net.cn/download/HBuilderX.3.1.22.20210709.full.zip\">HBuilder X</a> 导入项目 mall4juni  </p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改 utils/config.js</span><br><span class=\"line\">var mpAppId = &#x27;你的微信app id，与后台接口参数填的一致&#x27;</span><br><span class=\"line\">var domain = &quot;http://192.168.1.70:8112&quot;; //统一接口域名，测试环境</span><br><span class=\"line\">var wsDomain = &quot;ws://192.168.1.70:8112&quot;; //统一接口域名，测试环境</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改工具类代码\"><a href=\"#修改工具类代码\" class=\"headerlink\" title=\"修改工具类代码\"></a>修改工具类代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改 http.js ，原代码第33行，Authorization 的注释换掉，最终效果如下：</span><br><span class=\"line\">  wx.request(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    header: &#123;</span><br><span class=\"line\">      // &#x27;content-type&#x27;: params.method == &quot;GET&quot; ? &#x27;application/x-www-form-urlencoded&#x27; : &#x27;application/json;charset=utf-8&#x27;,</span><br><span class=\"line\">       &#x27;Authorization&#x27;: params.login ? undefined : uni.getStorageSync(&#x27;token&#x27;)</span><br><span class=\"line\">\t  // &#x27;Authorization&#x27;: !needToken ? undefined : uni.getStorageSync(&#x27;token&#x27;) || uni.getStorageSync(&#x27;tempToken&#x27;),</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>开发工具菜单栏 -&gt; 运行 -&gt; 运行到内置浏览器</p>\n<p>说明：HBuilder X 的内置浏览器，放开了跨域的限制，便于调试</p>\n"},{"title":"南海云课堂阿里云资源规格","date":"2021-02-22T08:51:07.000Z","_content":"\n\n### 云服务器 ECS （*3）\n\n`CPU&内存` 4核16 GiB\n\n`实例规格` ecs.g5.xlarge\n\n`硬盘/数据盘` 1TB\n\n\n\n### 负载均衡 SLB\n\n`实例规格` 性能保障型slb.s2.medium （`连接数`： 100000；`CPS`： 10000；`QPS`： 10000）\n\n`带宽值` 5120 Mbps\n\n\n\n### RDS 配置信息\n\n`实例ID` rm-wz9m151k36pb70j9e\n\n`CPU` 8 核\n\n`数据库内存 `16384 M\n\n`最大连接数` 4000\n\n`最大IOPS` 8000\n\n`实例规格` rds.mysql.c1.large\n\n\n\n### Redis 配置信息\n\n`实例ID` r-wz9b0lbhsjks5bjpbg\n\n`版本` Redis 5.0 社区版\n\n`实例规格` 4G主从版\n\n`最大连接数` 10,000\n\n`最大私网带宽` 24 MB/s\n\n\n\n### OSS 对象存储\n\n","source":"_posts/南海云课堂阿里云资源规格.md","raw":"---\ntitle: 南海云课堂阿里云资源规格\ndate: 2021-02-22 16:51:07\ncategories:\n  - 运维\n  - 规格\ntags:\n  - 服务器\n---\n\n\n### 云服务器 ECS （*3）\n\n`CPU&内存` 4核16 GiB\n\n`实例规格` ecs.g5.xlarge\n\n`硬盘/数据盘` 1TB\n\n\n\n### 负载均衡 SLB\n\n`实例规格` 性能保障型slb.s2.medium （`连接数`： 100000；`CPS`： 10000；`QPS`： 10000）\n\n`带宽值` 5120 Mbps\n\n\n\n### RDS 配置信息\n\n`实例ID` rm-wz9m151k36pb70j9e\n\n`CPU` 8 核\n\n`数据库内存 `16384 M\n\n`最大连接数` 4000\n\n`最大IOPS` 8000\n\n`实例规格` rds.mysql.c1.large\n\n\n\n### Redis 配置信息\n\n`实例ID` r-wz9b0lbhsjks5bjpbg\n\n`版本` Redis 5.0 社区版\n\n`实例规格` 4G主从版\n\n`最大连接数` 10,000\n\n`最大私网带宽` 24 MB/s\n\n\n\n### OSS 对象存储\n\n","slug":"南海云课堂阿里云资源规格","published":1,"updated":"2021-07-30T03:23:48.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdo0008hkax9pax0y8d","content":"<h3 id=\"云服务器-ECS-（-3）\"><a href=\"#云服务器-ECS-（-3）\" class=\"headerlink\" title=\"云服务器 ECS （*3）\"></a>云服务器 ECS （*3）</h3><p><code>CPU&amp;内存</code> 4核16 GiB</p>\n<p><code>实例规格</code> ecs.g5.xlarge</p>\n<p><code>硬盘/数据盘</code> 1TB</p>\n<h3 id=\"负载均衡-SLB\"><a href=\"#负载均衡-SLB\" class=\"headerlink\" title=\"负载均衡 SLB\"></a>负载均衡 SLB</h3><p><code>实例规格</code> 性能保障型slb.s2.medium （<code>连接数</code>： 100000；<code>CPS</code>： 10000；<code>QPS</code>： 10000）</p>\n<p><code>带宽值</code> 5120 Mbps</p>\n<h3 id=\"RDS-配置信息\"><a href=\"#RDS-配置信息\" class=\"headerlink\" title=\"RDS 配置信息\"></a>RDS 配置信息</h3><p><code>实例ID</code> rm-wz9m151k36pb70j9e</p>\n<p><code>CPU</code> 8 核</p>\n<p><code>数据库内存 </code>16384 M</p>\n<p><code>最大连接数</code> 4000</p>\n<p><code>最大IOPS</code> 8000</p>\n<p><code>实例规格</code> rds.mysql.c1.large</p>\n<h3 id=\"Redis-配置信息\"><a href=\"#Redis-配置信息\" class=\"headerlink\" title=\"Redis 配置信息\"></a>Redis 配置信息</h3><p><code>实例ID</code> r-wz9b0lbhsjks5bjpbg</p>\n<p><code>版本</code> Redis 5.0 社区版</p>\n<p><code>实例规格</code> 4G主从版</p>\n<p><code>最大连接数</code> 10,000</p>\n<p><code>最大私网带宽</code> 24 MB/s</p>\n<h3 id=\"OSS-对象存储\"><a href=\"#OSS-对象存储\" class=\"headerlink\" title=\"OSS 对象存储\"></a>OSS 对象存储</h3>","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h3 id=\"云服务器-ECS-（-3）\"><a href=\"#云服务器-ECS-（-3）\" class=\"headerlink\" title=\"云服务器 ECS （*3）\"></a>云服务器 ECS （*3）</h3><p><code>CPU&amp;内存</code> 4核16 GiB</p>\n<p><code>实例规格</code> ecs.g5.xlarge</p>\n<p><code>硬盘/数据盘</code> 1TB</p>\n<h3 id=\"负载均衡-SLB\"><a href=\"#负载均衡-SLB\" class=\"headerlink\" title=\"负载均衡 SLB\"></a>负载均衡 SLB</h3><p><code>实例规格</code> 性能保障型slb.s2.medium （<code>连接数</code>： 100000；<code>CPS</code>： 10000；<code>QPS</code>： 10000）</p>\n<p><code>带宽值</code> 5120 Mbps</p>\n<h3 id=\"RDS-配置信息\"><a href=\"#RDS-配置信息\" class=\"headerlink\" title=\"RDS 配置信息\"></a>RDS 配置信息</h3><p><code>实例ID</code> rm-wz9m151k36pb70j9e</p>\n<p><code>CPU</code> 8 核</p>\n<p><code>数据库内存 </code>16384 M</p>\n<p><code>最大连接数</code> 4000</p>\n<p><code>最大IOPS</code> 8000</p>\n<p><code>实例规格</code> rds.mysql.c1.large</p>\n<h3 id=\"Redis-配置信息\"><a href=\"#Redis-配置信息\" class=\"headerlink\" title=\"Redis 配置信息\"></a>Redis 配置信息</h3><p><code>实例ID</code> r-wz9b0lbhsjks5bjpbg</p>\n<p><code>版本</code> Redis 5.0 社区版</p>\n<p><code>实例规格</code> 4G主从版</p>\n<p><code>最大连接数</code> 10,000</p>\n<p><code>最大私网带宽</code> 24 MB/s</p>\n<h3 id=\"OSS-对象存储\"><a href=\"#OSS-对象存储\" class=\"headerlink\" title=\"OSS 对象存储\"></a>OSS 对象存储</h3>"},{"title":"备份OSS视频文件","date":"2021-04-28T08:51:07.000Z","_content":"\n1. 把 OSS 挂载到目录`/home/mike/nhykt-os`下，通过内网挂载\n\n2. cron 脚本，每天凌晨2点0分执行\n\n   ```\n   0 2 * * * /data/oss_backup.sh >> /var/log/oss_backup.log\n   ```\n\n3. 备份脚本`oss_backup.sh`\n\n   ```shell\n   #!/bin/bash\n   # Description: 备份 OSS 内容\n   # Notes:      将脚本加入crontab中，每天定时执行\n   MAX_LOOP_DAYS=1                      # 往前回顾检查的天数\n   \n   OSS_MOUNT_DIR=/home/mike/nhykt-oss           # OSS 挂载的根目录\n   OSS_BACKUP_DIR=/data/nhykt_oss_backup/                  # 备份的目的地\n   \n   for ((i=$MAX_LOOP_DAYS; i>0; i--))\n   do\n     src_date=`date -d \"$i days ago\" +'%Y%m%d' `\n     echo \"`date` backup $src_date\"\n     cp -au $OSS_MOUNT_DIR/$src_date $OSS_BACKUP_DIR\n     echo \"`date` done\"\n   \n   done\n   ```\n\n4. 通过 wget 直接下载备份\n\n   从数据库查出完整URL列表，保存为`video_files.txt`\n\n   ```sql\n   SELECT replay_url\n   FROM `live`\n   WHERE replay_url is not NULL and is_delete=0\n   ORDER BY replay_url\n   ```\n\n   或使用 cron 脚本，每天凌晨1点30分执行\n   \n   ```shell\n   30 1 * * * /data/get_rds_video_file_list.sh >> /var/log/get_rds_video_file.log\n   ```\n获取视频文件列表脚本 `get_rds_video_file_list.sh`   \n   \n   ```shell\n   #!/bin/bash\n   \n   OSS_BACKUP_DIR=/data/nhykt_oss_backup                  # 备份的目的地\n   FILES_LIST=\"$OSS_BACKUP_DIR/video_files.txt\"          # 视频文件列表，注意要使用 dos2unix 转换\n   \n   echo \"$FILES_LIST\"\n   lastIdFile=/tmp/last_id.txt\n   if [ ! -f \"$lastIdFile\" ]; then\n     echo \"lastIdFile 文件不存在，初始写入\"\n     echo \"-1\" > \"$lastIdFile\"\n   fi\n   \n   # 用来记录上次获取视频文件URL（非下载）的最大ID\n   lastId=$(cat $lastIdFile)\n   echo \"lastId: $lastId\"\n   \n   FILES_LIST=\"video_files.txt\"          # 视频文件列表，注意要使用 dos2unix 转换\n   rds_host=\"rm-wz9m151k36pb70j9eo.mysql.rds.aliyuncs.com\"\n   user=\"tiac_prod\"\n   password=\"1Z%H7jx8PhG&#BQltOHyD4io\"\n   database=\"tiac_prod\"\n   \n   echo \"获取视频文件URL，写入文件${FILES_LIST}\"\n   # 查询 replay_url\n   select_sql=\"SELECT replay_url FROM $database.live WHERE replay_url > '$lastId' and is_delete=0 ORDER BY replay_url\"\n   # 结果写入文件\n   mysql -h\"$rds_host\" -u\"$user\" -p\"$password\" -e \"${select_sql}\" |awk 'NR>1' >> \"$FILES_LIST\" \n   \n   echo \"更新lastId\"\n   # 更新 last_id\n   select_id_sql=\"SELECT max(replay_url) FROM $database.live WHERE replay_url is not NULL and is_delete=0 \"\n   mysql -h\"$rds_host\" -u\"$user\" -p\"$password\" -e \"${select_id_sql}\" |awk 'NR>1' > \"$lastIdFile\"\n   \n   ```\n   \n   \n   \n   备份脚本`oss_backup_wget.sh`\n   \n   ```shell\n#!/bin/bash\n   \n   # Description: 备份 OSS 内容\n   # Notes:      将脚本加入crontab中，每天定时执行\n   \n   MAX_LOOP=100                      # 每天备份的文件数\n   \n   OSS_BACKUP_DIR=/data/nhykt_oss_backup                  # 备份的目的地\n   FILES_LIST=\"$OSS_BACKUP_DIR/video_files.txt\"\t      # 视频文件列表，注意要使用 dos2unix 转换\n   \n   for ((i=$MAX_LOOP; i>0; i--))\n   do\n   #读取文件第一行\n     read line < $FILES_LIST  \n     echo \"`date -R` backup $line\"\n   \n     file_name_full=\"$OSS_BACKUP_DIR/$(echo $line | cut -d/ -f4-)\"\n     file_name_subdir=${file_name_full%/*}\n   \n     echo \"$file_name_full\"\n     echo \"$file_name_subdir\"\n   \n     #检查文件是否已存在，如果存在，与url大小对比\n     if [ -f $file_name_full ]\n     then\n       localsize=$(stat --format=%s $file_name_full)\n       remotesize=$(curl -s -I $line|grep Content-Length|awk '{print $2}'|tr -d \"\\r\\n\")\n       # 检查文件大小，如果不相等，续传\n       if [ \"$localsize\" = \"$remotesize\" ]\n       then\n         echo \"file exists & good, contiune\"\n         sed -i '1d' $FILES_LIST\n         continue\n       else\n         echo \"file fragment found, continue download\"\n         cd $file_name_subdir\n         wget -c $line\n       fi\n   # 文件不存在，\n     else\n       mkdir -p $file_name_subdir\n       cd $file_name_subdir\n       wget $line\n     fi\n   \n     #删除文件第一行\n     sed -i '1d' $FILES_LIST\n   done\n   \n   \n   ```\n","source":"_posts/备份OSS视频文件.md","raw":"---\ntitle: 备份OSS视频文件\ndate: 2021-04-28 16:51:07\ncategories:\n  - 运维\n  - 脚本\ntags:\n  - shell\n---\n\n1. 把 OSS 挂载到目录`/home/mike/nhykt-os`下，通过内网挂载\n\n2. cron 脚本，每天凌晨2点0分执行\n\n   ```\n   0 2 * * * /data/oss_backup.sh >> /var/log/oss_backup.log\n   ```\n\n3. 备份脚本`oss_backup.sh`\n\n   ```shell\n   #!/bin/bash\n   # Description: 备份 OSS 内容\n   # Notes:      将脚本加入crontab中，每天定时执行\n   MAX_LOOP_DAYS=1                      # 往前回顾检查的天数\n   \n   OSS_MOUNT_DIR=/home/mike/nhykt-oss           # OSS 挂载的根目录\n   OSS_BACKUP_DIR=/data/nhykt_oss_backup/                  # 备份的目的地\n   \n   for ((i=$MAX_LOOP_DAYS; i>0; i--))\n   do\n     src_date=`date -d \"$i days ago\" +'%Y%m%d' `\n     echo \"`date` backup $src_date\"\n     cp -au $OSS_MOUNT_DIR/$src_date $OSS_BACKUP_DIR\n     echo \"`date` done\"\n   \n   done\n   ```\n\n4. 通过 wget 直接下载备份\n\n   从数据库查出完整URL列表，保存为`video_files.txt`\n\n   ```sql\n   SELECT replay_url\n   FROM `live`\n   WHERE replay_url is not NULL and is_delete=0\n   ORDER BY replay_url\n   ```\n\n   或使用 cron 脚本，每天凌晨1点30分执行\n   \n   ```shell\n   30 1 * * * /data/get_rds_video_file_list.sh >> /var/log/get_rds_video_file.log\n   ```\n获取视频文件列表脚本 `get_rds_video_file_list.sh`   \n   \n   ```shell\n   #!/bin/bash\n   \n   OSS_BACKUP_DIR=/data/nhykt_oss_backup                  # 备份的目的地\n   FILES_LIST=\"$OSS_BACKUP_DIR/video_files.txt\"          # 视频文件列表，注意要使用 dos2unix 转换\n   \n   echo \"$FILES_LIST\"\n   lastIdFile=/tmp/last_id.txt\n   if [ ! -f \"$lastIdFile\" ]; then\n     echo \"lastIdFile 文件不存在，初始写入\"\n     echo \"-1\" > \"$lastIdFile\"\n   fi\n   \n   # 用来记录上次获取视频文件URL（非下载）的最大ID\n   lastId=$(cat $lastIdFile)\n   echo \"lastId: $lastId\"\n   \n   FILES_LIST=\"video_files.txt\"          # 视频文件列表，注意要使用 dos2unix 转换\n   rds_host=\"rm-wz9m151k36pb70j9eo.mysql.rds.aliyuncs.com\"\n   user=\"tiac_prod\"\n   password=\"1Z%H7jx8PhG&#BQltOHyD4io\"\n   database=\"tiac_prod\"\n   \n   echo \"获取视频文件URL，写入文件${FILES_LIST}\"\n   # 查询 replay_url\n   select_sql=\"SELECT replay_url FROM $database.live WHERE replay_url > '$lastId' and is_delete=0 ORDER BY replay_url\"\n   # 结果写入文件\n   mysql -h\"$rds_host\" -u\"$user\" -p\"$password\" -e \"${select_sql}\" |awk 'NR>1' >> \"$FILES_LIST\" \n   \n   echo \"更新lastId\"\n   # 更新 last_id\n   select_id_sql=\"SELECT max(replay_url) FROM $database.live WHERE replay_url is not NULL and is_delete=0 \"\n   mysql -h\"$rds_host\" -u\"$user\" -p\"$password\" -e \"${select_id_sql}\" |awk 'NR>1' > \"$lastIdFile\"\n   \n   ```\n   \n   \n   \n   备份脚本`oss_backup_wget.sh`\n   \n   ```shell\n#!/bin/bash\n   \n   # Description: 备份 OSS 内容\n   # Notes:      将脚本加入crontab中，每天定时执行\n   \n   MAX_LOOP=100                      # 每天备份的文件数\n   \n   OSS_BACKUP_DIR=/data/nhykt_oss_backup                  # 备份的目的地\n   FILES_LIST=\"$OSS_BACKUP_DIR/video_files.txt\"\t      # 视频文件列表，注意要使用 dos2unix 转换\n   \n   for ((i=$MAX_LOOP; i>0; i--))\n   do\n   #读取文件第一行\n     read line < $FILES_LIST  \n     echo \"`date -R` backup $line\"\n   \n     file_name_full=\"$OSS_BACKUP_DIR/$(echo $line | cut -d/ -f4-)\"\n     file_name_subdir=${file_name_full%/*}\n   \n     echo \"$file_name_full\"\n     echo \"$file_name_subdir\"\n   \n     #检查文件是否已存在，如果存在，与url大小对比\n     if [ -f $file_name_full ]\n     then\n       localsize=$(stat --format=%s $file_name_full)\n       remotesize=$(curl -s -I $line|grep Content-Length|awk '{print $2}'|tr -d \"\\r\\n\")\n       # 检查文件大小，如果不相等，续传\n       if [ \"$localsize\" = \"$remotesize\" ]\n       then\n         echo \"file exists & good, contiune\"\n         sed -i '1d' $FILES_LIST\n         continue\n       else\n         echo \"file fragment found, continue download\"\n         cd $file_name_subdir\n         wget -c $line\n       fi\n   # 文件不存在，\n     else\n       mkdir -p $file_name_subdir\n       cd $file_name_subdir\n       wget $line\n     fi\n   \n     #删除文件第一行\n     sed -i '1d' $FILES_LIST\n   done\n   \n   \n   ```\n","slug":"备份OSS视频文件","published":1,"updated":"2021-07-30T03:29:18.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdq000chkax8rbqb09m","content":"<ol>\n<li><p>把 OSS 挂载到目录<code>/home/mike/nhykt-os</code>下，通过内网挂载</p>\n</li>\n<li><p>cron 脚本，每天凌晨2点0分执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 2 * * * /data/oss_backup.sh &gt;&gt; /var/log/oss_backup.log</span><br></pre></td></tr></table></figure></li>\n<li><p>备份脚本<code>oss_backup.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Description: 备份 OSS 内容</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Notes:      将脚本加入crontab中，每天定时执行</span></span><br><span class=\"line\">MAX_LOOP_DAYS=1                      # 往前回顾检查的天数</span><br><span class=\"line\"></span><br><span class=\"line\">OSS_MOUNT_DIR=/home/mike/nhykt-oss           # OSS 挂载的根目录</span><br><span class=\"line\">OSS_BACKUP_DIR=/data/nhykt_oss_backup/                  # 备份的目的地</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=$MAX_LOOP_DAYS; i&gt;0; i--))</span><br><span class=\"line\">do</span><br><span class=\"line\">  src_date=`date -d &quot;$i days ago&quot; +&#x27;%Y%m%d&#x27; `</span><br><span class=\"line\">  echo &quot;`date` backup $src_date&quot;</span><br><span class=\"line\">  cp -au $OSS_MOUNT_DIR/$src_date $OSS_BACKUP_DIR</span><br><span class=\"line\">  echo &quot;`date` done&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></li>\n<li><p>通过 wget 直接下载备份</p>\n<p>从数据库查出完整URL列表，保存为<code>video_files.txt</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> replay_url</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `live`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> replay_url <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">and</span> is_delete<span class=\"operator\">=</span><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> replay_url</span><br></pre></td></tr></table></figure>\n\n<p>或使用 cron 脚本，每天凌晨1点30分执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30 1 * * * /data/get_rds_video_file_list.sh &gt;&gt; /var/log/get_rds_video_file.log</span><br></pre></td></tr></table></figure>\n<p>获取视频文件列表脚本 <code>get_rds_video_file_list.sh</code>   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">OSS_BACKUP_DIR=/data/nhykt_oss_backup                  # 备份的目的地</span><br><span class=\"line\">FILES_LIST=&quot;$OSS_BACKUP_DIR/video_files.txt&quot;          # 视频文件列表，注意要使用 dos2unix 转换</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;$FILES_LIST&quot;</span><br><span class=\"line\">lastIdFile=/tmp/last_id.txt</span><br><span class=\"line\">if [ ! -f &quot;$lastIdFile&quot; ]; then</span><br><span class=\"line\">  echo &quot;lastIdFile 文件不存在，初始写入&quot;</span><br><span class=\"line\">  echo &quot;-1&quot; &gt; &quot;$lastIdFile&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用来记录上次获取视频文件URL（非下载）的最大ID</span></span><br><span class=\"line\">lastId=$(cat $lastIdFile)</span><br><span class=\"line\">echo &quot;lastId: $lastId&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">FILES_LIST=&quot;video_files.txt&quot;          # 视频文件列表，注意要使用 dos2unix 转换</span><br><span class=\"line\">rds_host=&quot;rm-wz9m151k36pb70j9eo.mysql.rds.aliyuncs.com&quot;</span><br><span class=\"line\">user=&quot;tiac_prod&quot;</span><br><span class=\"line\">password=&quot;1Z%H7jx8PhG&amp;#BQltOHyD4io&quot;</span><br><span class=\"line\">database=&quot;tiac_prod&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;获取视频文件URL，写入文件$&#123;FILES_LIST&#125;&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询 replay_url</span></span><br><span class=\"line\">select_sql=&quot;SELECT replay_url FROM $database.live WHERE replay_url &gt; &#x27;$lastId&#x27; and is_delete=0 ORDER BY replay_url&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 结果写入文件</span></span><br><span class=\"line\">mysql -h&quot;$rds_host&quot; -u&quot;$user&quot; -p&quot;$password&quot; -e &quot;$&#123;select_sql&#125;&quot; |awk &#x27;NR&gt;1&#x27; &gt;&gt; &quot;$FILES_LIST&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;更新lastId&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 更新 last_id</span></span><br><span class=\"line\">select_id_sql=&quot;SELECT max(replay_url) FROM $database.live WHERE replay_url is not NULL and is_delete=0 &quot;</span><br><span class=\"line\">mysql -h&quot;$rds_host&quot; -u&quot;$user&quot; -p&quot;$password&quot; -e &quot;$&#123;select_id_sql&#125;&quot; |awk &#x27;NR&gt;1&#x27; &gt; &quot;$lastIdFile&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>备份脚本<code>oss_backup_wget.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"> Description: 备份 OSS 内容</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"> Notes:      将脚本加入crontab中，每天定时执行</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   MAX_LOOP=100                      # 每天备份的文件数</span><br><span class=\"line\">   </span><br><span class=\"line\">   OSS_BACKUP_DIR=/data/nhykt_oss_backup                  # 备份的目的地</span><br><span class=\"line\">   FILES_LIST=&quot;$OSS_BACKUP_DIR/video_files.txt&quot;\t      # 视频文件列表，注意要使用 dos2unix 转换</span><br><span class=\"line\">   </span><br><span class=\"line\">   for ((i=$MAX_LOOP; i&gt;0; i--))</span><br><span class=\"line\">   do</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">读取文件第一行</span></span><br><span class=\"line\">     read line &lt; $FILES_LIST  </span><br><span class=\"line\">     echo &quot;`date -R` backup $line&quot;</span><br><span class=\"line\">   </span><br><span class=\"line\">     file_name_full=&quot;$OSS_BACKUP_DIR/$(echo $line | cut -d/ -f4-)&quot;</span><br><span class=\"line\">     file_name_subdir=$&#123;file_name_full%/*&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">     echo &quot;$file_name_full&quot;</span><br><span class=\"line\">     echo &quot;$file_name_subdir&quot;</span><br><span class=\"line\">   </span><br><span class=\"line\">     #检查文件是否已存在，如果存在，与url大小对比</span><br><span class=\"line\">     if [ -f $file_name_full ]</span><br><span class=\"line\">     then</span><br><span class=\"line\">       localsize=$(stat --format=%s $file_name_full)</span><br><span class=\"line\">       remotesize=$(curl -s -I $line|grep Content-Length|awk &#x27;&#123;print $2&#125;&#x27;|tr -d &quot;\\r\\n&quot;)</span><br><span class=\"line\">       # 检查文件大小，如果不相等，续传</span><br><span class=\"line\">       if [ &quot;$localsize&quot; = &quot;$remotesize&quot; ]</span><br><span class=\"line\">       then</span><br><span class=\"line\">         echo &quot;file exists &amp; good, contiune&quot;</span><br><span class=\"line\">         sed -i &#x27;1d&#x27; $FILES_LIST</span><br><span class=\"line\">         continue</span><br><span class=\"line\">       else</span><br><span class=\"line\">         echo &quot;file fragment found, continue download&quot;</span><br><span class=\"line\">         cd $file_name_subdir</span><br><span class=\"line\">         wget -c $line</span><br><span class=\"line\">       fi</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"> 文件不存在，</span></span><br><span class=\"line\">     else</span><br><span class=\"line\">       mkdir -p $file_name_subdir</span><br><span class=\"line\">       cd $file_name_subdir</span><br><span class=\"line\">       wget $line</span><br><span class=\"line\">     fi</span><br><span class=\"line\">   </span><br><span class=\"line\">     #删除文件第一行</span><br><span class=\"line\">     sed -i &#x27;1d&#x27; $FILES_LIST</span><br><span class=\"line\">   done</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<ol>\n<li><p>把 OSS 挂载到目录<code>/home/mike/nhykt-os</code>下，通过内网挂载</p>\n</li>\n<li><p>cron 脚本，每天凌晨2点0分执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 2 * * * /data/oss_backup.sh &gt;&gt; /var/log/oss_backup.log</span><br></pre></td></tr></table></figure></li>\n<li><p>备份脚本<code>oss_backup.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Description: 备份 OSS 内容</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Notes:      将脚本加入crontab中，每天定时执行</span></span><br><span class=\"line\">MAX_LOOP_DAYS=1                      # 往前回顾检查的天数</span><br><span class=\"line\"></span><br><span class=\"line\">OSS_MOUNT_DIR=/home/mike/nhykt-oss           # OSS 挂载的根目录</span><br><span class=\"line\">OSS_BACKUP_DIR=/data/nhykt_oss_backup/                  # 备份的目的地</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=$MAX_LOOP_DAYS; i&gt;0; i--))</span><br><span class=\"line\">do</span><br><span class=\"line\">  src_date=`date -d &quot;$i days ago&quot; +&#x27;%Y%m%d&#x27; `</span><br><span class=\"line\">  echo &quot;`date` backup $src_date&quot;</span><br><span class=\"line\">  cp -au $OSS_MOUNT_DIR/$src_date $OSS_BACKUP_DIR</span><br><span class=\"line\">  echo &quot;`date` done&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></li>\n<li><p>通过 wget 直接下载备份</p>\n<p>从数据库查出完整URL列表，保存为<code>video_files.txt</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> replay_url</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `live`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> replay_url <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">and</span> is_delete<span class=\"operator\">=</span><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> replay_url</span><br></pre></td></tr></table></figure>\n\n<p>或使用 cron 脚本，每天凌晨1点30分执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30 1 * * * /data/get_rds_video_file_list.sh &gt;&gt; /var/log/get_rds_video_file.log</span><br></pre></td></tr></table></figure>\n<p>获取视频文件列表脚本 <code>get_rds_video_file_list.sh</code>   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">OSS_BACKUP_DIR=/data/nhykt_oss_backup                  # 备份的目的地</span><br><span class=\"line\">FILES_LIST=&quot;$OSS_BACKUP_DIR/video_files.txt&quot;          # 视频文件列表，注意要使用 dos2unix 转换</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;$FILES_LIST&quot;</span><br><span class=\"line\">lastIdFile=/tmp/last_id.txt</span><br><span class=\"line\">if [ ! -f &quot;$lastIdFile&quot; ]; then</span><br><span class=\"line\">  echo &quot;lastIdFile 文件不存在，初始写入&quot;</span><br><span class=\"line\">  echo &quot;-1&quot; &gt; &quot;$lastIdFile&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用来记录上次获取视频文件URL（非下载）的最大ID</span></span><br><span class=\"line\">lastId=$(cat $lastIdFile)</span><br><span class=\"line\">echo &quot;lastId: $lastId&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">FILES_LIST=&quot;video_files.txt&quot;          # 视频文件列表，注意要使用 dos2unix 转换</span><br><span class=\"line\">rds_host=&quot;rm-wz9m151k36pb70j9eo.mysql.rds.aliyuncs.com&quot;</span><br><span class=\"line\">user=&quot;tiac_prod&quot;</span><br><span class=\"line\">password=&quot;1Z%H7jx8PhG&amp;#BQltOHyD4io&quot;</span><br><span class=\"line\">database=&quot;tiac_prod&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;获取视频文件URL，写入文件$&#123;FILES_LIST&#125;&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询 replay_url</span></span><br><span class=\"line\">select_sql=&quot;SELECT replay_url FROM $database.live WHERE replay_url &gt; &#x27;$lastId&#x27; and is_delete=0 ORDER BY replay_url&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 结果写入文件</span></span><br><span class=\"line\">mysql -h&quot;$rds_host&quot; -u&quot;$user&quot; -p&quot;$password&quot; -e &quot;$&#123;select_sql&#125;&quot; |awk &#x27;NR&gt;1&#x27; &gt;&gt; &quot;$FILES_LIST&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;更新lastId&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 更新 last_id</span></span><br><span class=\"line\">select_id_sql=&quot;SELECT max(replay_url) FROM $database.live WHERE replay_url is not NULL and is_delete=0 &quot;</span><br><span class=\"line\">mysql -h&quot;$rds_host&quot; -u&quot;$user&quot; -p&quot;$password&quot; -e &quot;$&#123;select_id_sql&#125;&quot; |awk &#x27;NR&gt;1&#x27; &gt; &quot;$lastIdFile&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>备份脚本<code>oss_backup_wget.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"> Description: 备份 OSS 内容</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"> Notes:      将脚本加入crontab中，每天定时执行</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   MAX_LOOP=100                      # 每天备份的文件数</span><br><span class=\"line\">   </span><br><span class=\"line\">   OSS_BACKUP_DIR=/data/nhykt_oss_backup                  # 备份的目的地</span><br><span class=\"line\">   FILES_LIST=&quot;$OSS_BACKUP_DIR/video_files.txt&quot;\t      # 视频文件列表，注意要使用 dos2unix 转换</span><br><span class=\"line\">   </span><br><span class=\"line\">   for ((i=$MAX_LOOP; i&gt;0; i--))</span><br><span class=\"line\">   do</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">读取文件第一行</span></span><br><span class=\"line\">     read line &lt; $FILES_LIST  </span><br><span class=\"line\">     echo &quot;`date -R` backup $line&quot;</span><br><span class=\"line\">   </span><br><span class=\"line\">     file_name_full=&quot;$OSS_BACKUP_DIR/$(echo $line | cut -d/ -f4-)&quot;</span><br><span class=\"line\">     file_name_subdir=$&#123;file_name_full%/*&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">     echo &quot;$file_name_full&quot;</span><br><span class=\"line\">     echo &quot;$file_name_subdir&quot;</span><br><span class=\"line\">   </span><br><span class=\"line\">     #检查文件是否已存在，如果存在，与url大小对比</span><br><span class=\"line\">     if [ -f $file_name_full ]</span><br><span class=\"line\">     then</span><br><span class=\"line\">       localsize=$(stat --format=%s $file_name_full)</span><br><span class=\"line\">       remotesize=$(curl -s -I $line|grep Content-Length|awk &#x27;&#123;print $2&#125;&#x27;|tr -d &quot;\\r\\n&quot;)</span><br><span class=\"line\">       # 检查文件大小，如果不相等，续传</span><br><span class=\"line\">       if [ &quot;$localsize&quot; = &quot;$remotesize&quot; ]</span><br><span class=\"line\">       then</span><br><span class=\"line\">         echo &quot;file exists &amp; good, contiune&quot;</span><br><span class=\"line\">         sed -i &#x27;1d&#x27; $FILES_LIST</span><br><span class=\"line\">         continue</span><br><span class=\"line\">       else</span><br><span class=\"line\">         echo &quot;file fragment found, continue download&quot;</span><br><span class=\"line\">         cd $file_name_subdir</span><br><span class=\"line\">         wget -c $line</span><br><span class=\"line\">       fi</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\"> 文件不存在，</span></span><br><span class=\"line\">     else</span><br><span class=\"line\">       mkdir -p $file_name_subdir</span><br><span class=\"line\">       cd $file_name_subdir</span><br><span class=\"line\">       wget $line</span><br><span class=\"line\">     fi</span><br><span class=\"line\">   </span><br><span class=\"line\">     #删除文件第一行</span><br><span class=\"line\">     sed -i &#x27;1d&#x27; $FILES_LIST</span><br><span class=\"line\">   done</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"备份数据库","date":"2021-04-28T08:51:07.000Z","_content":"\n\n备份脚本\n\n```shell\n#!/bin/bash\n# -*- coding: utf-8 -*-\n# 注意 MySQL 8 以后要加上 --column-statistics=0\n\nbackup_dir=\"/data/backup/nhykt_rds_backup\"\nd=$(date \"+%Y%m%d\")\nrds_host=\"rm-wz9m151k36pb70j9eo.mysql.rds.aliyuncs.com\"\nuser=\"tiac_prod\"\npassword=\"\"\ndatabase=\"tiac_prod\"\n\nmkdir -p \"$backup_dir\"\nmysqldump --column-statistics=0 -h\"$rds_host\" -u\"$user\" -p\"$password\" --quick \"$database\" | /usr/bin/gzip > \"$backup_dir/$d.sql.gz\"\n\n```\n\n","source":"_posts/备份数据库.md","raw":"---\ntitle: 备份数据库\ndate: 2021-04-28 16:51:07\ncategories:\n  - 运维\n  - 脚本\ntags:\n  - shell\n---\n\n\n备份脚本\n\n```shell\n#!/bin/bash\n# -*- coding: utf-8 -*-\n# 注意 MySQL 8 以后要加上 --column-statistics=0\n\nbackup_dir=\"/data/backup/nhykt_rds_backup\"\nd=$(date \"+%Y%m%d\")\nrds_host=\"rm-wz9m151k36pb70j9eo.mysql.rds.aliyuncs.com\"\nuser=\"tiac_prod\"\npassword=\"\"\ndatabase=\"tiac_prod\"\n\nmkdir -p \"$backup_dir\"\nmysqldump --column-statistics=0 -h\"$rds_host\" -u\"$user\" -p\"$password\" --quick \"$database\" | /usr/bin/gzip > \"$backup_dir/$d.sql.gz\"\n\n```\n\n","slug":"备份数据库","published":1,"updated":"2021-07-30T03:23:30.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdr000dhkaxdgex4aqs","content":"<p>备份脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意 MySQL 8 以后要加上 --column-statistics=0</span></span><br><span class=\"line\"></span><br><span class=\"line\">backup_dir=&quot;/data/backup/nhykt_rds_backup&quot;</span><br><span class=\"line\">d=$(date &quot;+%Y%m%d&quot;)</span><br><span class=\"line\">rds_host=&quot;rm-wz9m151k36pb70j9eo.mysql.rds.aliyuncs.com&quot;</span><br><span class=\"line\">user=&quot;tiac_prod&quot;</span><br><span class=\"line\">password=&quot;&quot;</span><br><span class=\"line\">database=&quot;tiac_prod&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p &quot;$backup_dir&quot;</span><br><span class=\"line\">mysqldump --column-statistics=0 -h&quot;$rds_host&quot; -u&quot;$user&quot; -p&quot;$password&quot; --quick &quot;$database&quot; | /usr/bin/gzip &gt; &quot;$backup_dir/$d.sql.gz&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>备份脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意 MySQL 8 以后要加上 --column-statistics=0</span></span><br><span class=\"line\"></span><br><span class=\"line\">backup_dir=&quot;/data/backup/nhykt_rds_backup&quot;</span><br><span class=\"line\">d=$(date &quot;+%Y%m%d&quot;)</span><br><span class=\"line\">rds_host=&quot;rm-wz9m151k36pb70j9eo.mysql.rds.aliyuncs.com&quot;</span><br><span class=\"line\">user=&quot;tiac_prod&quot;</span><br><span class=\"line\">password=&quot;&quot;</span><br><span class=\"line\">database=&quot;tiac_prod&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p &quot;$backup_dir&quot;</span><br><span class=\"line\">mysqldump --column-statistics=0 -h&quot;$rds_host&quot; -u&quot;$user&quot; -p&quot;$password&quot; --quick &quot;$database&quot; | /usr/bin/gzip &gt; &quot;$backup_dir/$d.sql.gz&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"开发规范","date":"2021-02-22T08:51:07.000Z","_content":"\n# 开发规范\n\n## 开发工具\n\n- Java 项目使用 `IntelliJ IDEA`\n  - 建议安装插件 `SonarLint` 和 `Alibaba Java Coding Guidelines` ，在开发过程使用这2个插件检查代码\n- 网站开发使用 `Visual Studio Code`\n  - \n\n\n\n## 通用\n\n- 配置文件\n\n  - 不要在代码里 hard code `外部接口`地址等，要写到配置文件里\n  - 不是本项目实现的、要调用别人的功能，都属于`外部接口`\n  - 不允许＂换个环境部署＂或 ＂改个接口地址＂就要重新编译代码打包，用配置文件解决\n\n  - 不允许针对不同环境使用不同的编译命令，例如正式和测试环境分别使用下面命令编译 `npm run build-pro`, `npm run build-dev`，这是不对的。应使用通用的编译命令，通过配置文件调整参数\n  - 配置文件里每个变量，应只有一个赋值。\n    - 赋值要简单、直接\n    - 不允许在同一个配置文件里列出“测试”、\"正式\" 等多个环境对应的值，再经过第二层判断选定\n\n- 事务\n\n  - 例如购买行为，要按订单流程走：生成订单、支付扣款。记录流程对应的中间状态\n\n  - 在 生成订单和支付扣款的处理中，分别要加上分布式锁\n\n- 安全\n  - 《Web应用安全开发规范-V1.5.docx》，注意最后章节的附件\n\n\n\n ## Java\n\n### 常见的性能瓶颈\n\n- DB数据库\n\n  - Java 代码可以多实例多线程，可以水平扩展\n\n  - DB 最优的情况下也会有行锁。DB 是传统的瓶颈项\n\n  - 不要把 DB 当成逻辑处理单元，要尽量简单的增删改查逻辑\n\n  - 能在 Java 代码处理的逻辑，不要让 DB 来处理\n  - 思考  NoSQL 的来源，就是为了避免 SQL 的复杂\n- 第三方调用\n  - 不影响用户预期的，放到任务表，由其它项目操作\n    - 使用新建线程，也会占用当前 JVM 资源，尽量丢给别的项目干活。即“微服务”的思想\n  - 例如发送短信验证码接口\n    - 接口只保存任务，即返回接口成功\n    - 其它项目再调用接口API发送短信\n- 消息队列\n  - 关注消息队列发消息耗时\n  - 例如南海云课堂上传视频到OSS\n    - biz 保存任务到DB\n    - 新项目（多个实例部署）去完成任务。\n    - 传视频的任务耗时长，不适合放在接口主项目，占用资源，影响其它接口\n- 接口准入\n  - 公司内部的接口，给内部的网页/APP 接口时，也要使用鉴权，例如 APPID/SECRECT\n  - 把接口提供给外面的公司使用时，为对方新建 APPID/SECRECT 。\n- 功能切割\n  - 把上传功能做成独立的项目并提供接口。服务器配置文件控制 文件保存到  FastDFS 或者 阿里云 OSS，或者 其它的品牌的对象存储（如华为云的对象存储）\n  - 统一文件上传的逻辑。网页/客户端 通过上传接口获取到文件 URL，调用接口保存表单时在接口只传递 URL 参数。（参考 UEditor 的做法）\n- 版权\n  - 尽量使用 OpenJDK，不要使用 Oracle JDK 的独有功能。后者可能会带来版权问题。\n\n## Web前端 \n\n特别要注意前面 “通用“ 章节的说明\n\n","source":"_posts/开发规范.md","raw":"---\ntitle: 开发规范\ndate: 2021-02-22 16:51:07\ncategories:\n  - 研发流程\ntags:\n  - 规范\n  - java\n  - vue\n---\n\n# 开发规范\n\n## 开发工具\n\n- Java 项目使用 `IntelliJ IDEA`\n  - 建议安装插件 `SonarLint` 和 `Alibaba Java Coding Guidelines` ，在开发过程使用这2个插件检查代码\n- 网站开发使用 `Visual Studio Code`\n  - \n\n\n\n## 通用\n\n- 配置文件\n\n  - 不要在代码里 hard code `外部接口`地址等，要写到配置文件里\n  - 不是本项目实现的、要调用别人的功能，都属于`外部接口`\n  - 不允许＂换个环境部署＂或 ＂改个接口地址＂就要重新编译代码打包，用配置文件解决\n\n  - 不允许针对不同环境使用不同的编译命令，例如正式和测试环境分别使用下面命令编译 `npm run build-pro`, `npm run build-dev`，这是不对的。应使用通用的编译命令，通过配置文件调整参数\n  - 配置文件里每个变量，应只有一个赋值。\n    - 赋值要简单、直接\n    - 不允许在同一个配置文件里列出“测试”、\"正式\" 等多个环境对应的值，再经过第二层判断选定\n\n- 事务\n\n  - 例如购买行为，要按订单流程走：生成订单、支付扣款。记录流程对应的中间状态\n\n  - 在 生成订单和支付扣款的处理中，分别要加上分布式锁\n\n- 安全\n  - 《Web应用安全开发规范-V1.5.docx》，注意最后章节的附件\n\n\n\n ## Java\n\n### 常见的性能瓶颈\n\n- DB数据库\n\n  - Java 代码可以多实例多线程，可以水平扩展\n\n  - DB 最优的情况下也会有行锁。DB 是传统的瓶颈项\n\n  - 不要把 DB 当成逻辑处理单元，要尽量简单的增删改查逻辑\n\n  - 能在 Java 代码处理的逻辑，不要让 DB 来处理\n  - 思考  NoSQL 的来源，就是为了避免 SQL 的复杂\n- 第三方调用\n  - 不影响用户预期的，放到任务表，由其它项目操作\n    - 使用新建线程，也会占用当前 JVM 资源，尽量丢给别的项目干活。即“微服务”的思想\n  - 例如发送短信验证码接口\n    - 接口只保存任务，即返回接口成功\n    - 其它项目再调用接口API发送短信\n- 消息队列\n  - 关注消息队列发消息耗时\n  - 例如南海云课堂上传视频到OSS\n    - biz 保存任务到DB\n    - 新项目（多个实例部署）去完成任务。\n    - 传视频的任务耗时长，不适合放在接口主项目，占用资源，影响其它接口\n- 接口准入\n  - 公司内部的接口，给内部的网页/APP 接口时，也要使用鉴权，例如 APPID/SECRECT\n  - 把接口提供给外面的公司使用时，为对方新建 APPID/SECRECT 。\n- 功能切割\n  - 把上传功能做成独立的项目并提供接口。服务器配置文件控制 文件保存到  FastDFS 或者 阿里云 OSS，或者 其它的品牌的对象存储（如华为云的对象存储）\n  - 统一文件上传的逻辑。网页/客户端 通过上传接口获取到文件 URL，调用接口保存表单时在接口只传递 URL 参数。（参考 UEditor 的做法）\n- 版权\n  - 尽量使用 OpenJDK，不要使用 Oracle JDK 的独有功能。后者可能会带来版权问题。\n\n## Web前端 \n\n特别要注意前面 “通用“ 章节的说明\n\n","slug":"开发规范","published":1,"updated":"2021-07-30T03:22:26.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdt000hhkaxhqu0e5q6","content":"<h1 id=\"开发规范\"><a href=\"#开发规范\" class=\"headerlink\" title=\"开发规范\"></a>开发规范</h1><h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><ul>\n<li>Java 项目使用 <code>IntelliJ IDEA</code><ul>\n<li>建议安装插件 <code>SonarLint</code> 和 <code>Alibaba Java Coding Guidelines</code> ，在开发过程使用这2个插件检查代码</li>\n</ul>\n</li>\n<li><h2 id=\"网站开发使用-Visual-Studio-Code\"><a href=\"#网站开发使用-Visual-Studio-Code\" class=\"headerlink\" title=\"网站开发使用 Visual Studio Code\"></a>网站开发使用 <code>Visual Studio Code</code></h2></li>\n</ul>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><ul>\n<li><p>配置文件</p>\n<ul>\n<li><p>不要在代码里 hard code <code>外部接口</code>地址等，要写到配置文件里</p>\n</li>\n<li><p>不是本项目实现的、要调用别人的功能，都属于<code>外部接口</code></p>\n</li>\n<li><p>不允许＂换个环境部署＂或 ＂改个接口地址＂就要重新编译代码打包，用配置文件解决</p>\n</li>\n<li><p>不允许针对不同环境使用不同的编译命令，例如正式和测试环境分别使用下面命令编译 <code>npm run build-pro</code>, <code>npm run build-dev</code>，这是不对的。应使用通用的编译命令，通过配置文件调整参数</p>\n</li>\n<li><p>配置文件里每个变量，应只有一个赋值。</p>\n<ul>\n<li>赋值要简单、直接</li>\n<li>不允许在同一个配置文件里列出“测试”、”正式” 等多个环境对应的值，再经过第二层判断选定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>事务</p>\n<ul>\n<li><p>例如购买行为，要按订单流程走：生成订单、支付扣款。记录流程对应的中间状态</p>\n</li>\n<li><p>在 生成订单和支付扣款的处理中，分别要加上分布式锁</p>\n</li>\n</ul>\n</li>\n<li><p>安全</p>\n<ul>\n<li>《Web应用安全开发规范-V1.5.docx》，注意最后章节的附件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"常见的性能瓶颈\"><a href=\"#常见的性能瓶颈\" class=\"headerlink\" title=\"常见的性能瓶颈\"></a>常见的性能瓶颈</h3><ul>\n<li><p>DB数据库</p>\n<ul>\n<li><p>Java 代码可以多实例多线程，可以水平扩展</p>\n</li>\n<li><p>DB 最优的情况下也会有行锁。DB 是传统的瓶颈项</p>\n</li>\n<li><p>不要把 DB 当成逻辑处理单元，要尽量简单的增删改查逻辑</p>\n</li>\n<li><p>能在 Java 代码处理的逻辑，不要让 DB 来处理</p>\n</li>\n<li><p>思考  NoSQL 的来源，就是为了避免 SQL 的复杂</p>\n</li>\n</ul>\n</li>\n<li><p>第三方调用</p>\n<ul>\n<li>不影响用户预期的，放到任务表，由其它项目操作<ul>\n<li>使用新建线程，也会占用当前 JVM 资源，尽量丢给别的项目干活。即“微服务”的思想</li>\n</ul>\n</li>\n<li>例如发送短信验证码接口<ul>\n<li>接口只保存任务，即返回接口成功</li>\n<li>其它项目再调用接口API发送短信</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>消息队列</p>\n<ul>\n<li>关注消息队列发消息耗时</li>\n<li>例如南海云课堂上传视频到OSS<ul>\n<li>biz 保存任务到DB</li>\n<li>新项目（多个实例部署）去完成任务。</li>\n<li>传视频的任务耗时长，不适合放在接口主项目，占用资源，影响其它接口</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>接口准入</p>\n<ul>\n<li>公司内部的接口，给内部的网页/APP 接口时，也要使用鉴权，例如 APPID/SECRECT</li>\n<li>把接口提供给外面的公司使用时，为对方新建 APPID/SECRECT 。</li>\n</ul>\n</li>\n<li><p>功能切割</p>\n<ul>\n<li>把上传功能做成独立的项目并提供接口。服务器配置文件控制 文件保存到  FastDFS 或者 阿里云 OSS，或者 其它的品牌的对象存储（如华为云的对象存储）</li>\n<li>统一文件上传的逻辑。网页/客户端 通过上传接口获取到文件 URL，调用接口保存表单时在接口只传递 URL 参数。（参考 UEditor 的做法）</li>\n</ul>\n</li>\n<li><p>版权</p>\n<ul>\n<li>尽量使用 OpenJDK，不要使用 Oracle JDK 的独有功能。后者可能会带来版权问题。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Web前端\"><a href=\"#Web前端\" class=\"headerlink\" title=\"Web前端\"></a>Web前端</h2><p>特别要注意前面 “通用“ 章节的说明</p>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"开发规范\"><a href=\"#开发规范\" class=\"headerlink\" title=\"开发规范\"></a>开发规范</h1><h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><ul>\n<li>Java 项目使用 <code>IntelliJ IDEA</code><ul>\n<li>建议安装插件 <code>SonarLint</code> 和 <code>Alibaba Java Coding Guidelines</code> ，在开发过程使用这2个插件检查代码</li>\n</ul>\n</li>\n<li><h2 id=\"网站开发使用-Visual-Studio-Code\"><a href=\"#网站开发使用-Visual-Studio-Code\" class=\"headerlink\" title=\"网站开发使用 Visual Studio Code\"></a>网站开发使用 <code>Visual Studio Code</code></h2></li>\n</ul>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><ul>\n<li><p>配置文件</p>\n<ul>\n<li><p>不要在代码里 hard code <code>外部接口</code>地址等，要写到配置文件里</p>\n</li>\n<li><p>不是本项目实现的、要调用别人的功能，都属于<code>外部接口</code></p>\n</li>\n<li><p>不允许＂换个环境部署＂或 ＂改个接口地址＂就要重新编译代码打包，用配置文件解决</p>\n</li>\n<li><p>不允许针对不同环境使用不同的编译命令，例如正式和测试环境分别使用下面命令编译 <code>npm run build-pro</code>, <code>npm run build-dev</code>，这是不对的。应使用通用的编译命令，通过配置文件调整参数</p>\n</li>\n<li><p>配置文件里每个变量，应只有一个赋值。</p>\n<ul>\n<li>赋值要简单、直接</li>\n<li>不允许在同一个配置文件里列出“测试”、”正式” 等多个环境对应的值，再经过第二层判断选定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>事务</p>\n<ul>\n<li><p>例如购买行为，要按订单流程走：生成订单、支付扣款。记录流程对应的中间状态</p>\n</li>\n<li><p>在 生成订单和支付扣款的处理中，分别要加上分布式锁</p>\n</li>\n</ul>\n</li>\n<li><p>安全</p>\n<ul>\n<li>《Web应用安全开发规范-V1.5.docx》，注意最后章节的附件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"常见的性能瓶颈\"><a href=\"#常见的性能瓶颈\" class=\"headerlink\" title=\"常见的性能瓶颈\"></a>常见的性能瓶颈</h3><ul>\n<li><p>DB数据库</p>\n<ul>\n<li><p>Java 代码可以多实例多线程，可以水平扩展</p>\n</li>\n<li><p>DB 最优的情况下也会有行锁。DB 是传统的瓶颈项</p>\n</li>\n<li><p>不要把 DB 当成逻辑处理单元，要尽量简单的增删改查逻辑</p>\n</li>\n<li><p>能在 Java 代码处理的逻辑，不要让 DB 来处理</p>\n</li>\n<li><p>思考  NoSQL 的来源，就是为了避免 SQL 的复杂</p>\n</li>\n</ul>\n</li>\n<li><p>第三方调用</p>\n<ul>\n<li>不影响用户预期的，放到任务表，由其它项目操作<ul>\n<li>使用新建线程，也会占用当前 JVM 资源，尽量丢给别的项目干活。即“微服务”的思想</li>\n</ul>\n</li>\n<li>例如发送短信验证码接口<ul>\n<li>接口只保存任务，即返回接口成功</li>\n<li>其它项目再调用接口API发送短信</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>消息队列</p>\n<ul>\n<li>关注消息队列发消息耗时</li>\n<li>例如南海云课堂上传视频到OSS<ul>\n<li>biz 保存任务到DB</li>\n<li>新项目（多个实例部署）去完成任务。</li>\n<li>传视频的任务耗时长，不适合放在接口主项目，占用资源，影响其它接口</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>接口准入</p>\n<ul>\n<li>公司内部的接口，给内部的网页/APP 接口时，也要使用鉴权，例如 APPID/SECRECT</li>\n<li>把接口提供给外面的公司使用时，为对方新建 APPID/SECRECT 。</li>\n</ul>\n</li>\n<li><p>功能切割</p>\n<ul>\n<li>把上传功能做成独立的项目并提供接口。服务器配置文件控制 文件保存到  FastDFS 或者 阿里云 OSS，或者 其它的品牌的对象存储（如华为云的对象存储）</li>\n<li>统一文件上传的逻辑。网页/客户端 通过上传接口获取到文件 URL，调用接口保存表单时在接口只传递 URL 参数。（参考 UEditor 的做法）</li>\n</ul>\n</li>\n<li><p>版权</p>\n<ul>\n<li>尽量使用 OpenJDK，不要使用 Oracle JDK 的独有功能。后者可能会带来版权问题。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Web前端\"><a href=\"#Web前端\" class=\"headerlink\" title=\"Web前端\"></a>Web前端</h2><p>特别要注意前面 “通用“ 章节的说明</p>\n"},{"title":"清除OSS多余mp4文件","date":"2021-04-08T08:51:07.000Z","_content":"\n1. 以下场景用到视频文件，上传到 OSS \n\n   | 模块       | 数据库表          | 字段        | 说明                                                         |\n   | ---------- | ----------------- | ----------- | ------------------------------------------------------------ |\n   | 视频录制   | tiac_prod.live    | replay_url  | 只用来回调。腾讯回调，给出一个地址，会过期。<br>所以要上传到 OSS |\n   | 云课堂作业 | homework_question | content_url | content_type为2时，表示视频                                  |\n   |            | question          | video_url   |                                                              |\n   |            | question_reply    | video_url   |                                                              |\n\n   \n\n2. 从数据库中导出视频文件列表（去掉域名），导出到 `video_files.txt`\n\n   ```sql\nSELECT REPLACE(r1, \"https://oss-tiac.lconrise.cn\", \"\") as r2\nfrom\n(SELECT REPLACE(replay_url, \"http://oss-tiac.lconrise.cn\", \"\") as r1\nFROM `live`\nWHERE replay_url is not NULL and is_delete=0) b\n   ```\n\n3. SHELL脚本遍历目录，找出所以mp4文件，如果不在 `video_files.txt` 里，则删掉\n\n   ```shell\n#!/bin/bash\n#当前目录名\n   top_dir=$(pwd)\n   #把数据库查出来的文件名，加载到数组里\n   array=($(awk '{print $1}' video_files.txt))\n\n   #待删文件备份目录\n   del_backup_dir=\"/data/nhykt_oss_backup_before_delete\"\n   mkdir -p \"$del_backup_dir\"\n\n   #递归查找所有 mp4 文件，放到数组里\n   mp4array=($(find . -name \"*.mp4\" -type f))\n   for mp4 in ${mp4array[@]};\n   do\n   #因为find找出来的文件名，前面带\".\"，去掉第1个字符\n     m=(${mp4:1})\n     if [[ \"${array[@]}\" =~ \"$m\" ]]; then\n       echo \"$m exist: yes\"\n     else\n       echo \"$m exist: no\"\n       #用${m%/*}提取文件名的路径信息\n       mkdir -p \"$del_backup_dir/${m%/*}\"\n       #移动文件到待删备份目录\n       mv \".$m\" \"$del_backup_dir/$m\"\n     fi\n   done;\n   ```\n\n\n","source":"_posts/清除OSS多余mp4文件.md","raw":"---\ntitle: 清除OSS多余mp4文件\ndate: 2021-04-08 16:51:07\ncategories:\n  - 运维\n  - 脚本\ntags:\n  - shell\n---\n\n1. 以下场景用到视频文件，上传到 OSS \n\n   | 模块       | 数据库表          | 字段        | 说明                                                         |\n   | ---------- | ----------------- | ----------- | ------------------------------------------------------------ |\n   | 视频录制   | tiac_prod.live    | replay_url  | 只用来回调。腾讯回调，给出一个地址，会过期。<br>所以要上传到 OSS |\n   | 云课堂作业 | homework_question | content_url | content_type为2时，表示视频                                  |\n   |            | question          | video_url   |                                                              |\n   |            | question_reply    | video_url   |                                                              |\n\n   \n\n2. 从数据库中导出视频文件列表（去掉域名），导出到 `video_files.txt`\n\n   ```sql\nSELECT REPLACE(r1, \"https://oss-tiac.lconrise.cn\", \"\") as r2\nfrom\n(SELECT REPLACE(replay_url, \"http://oss-tiac.lconrise.cn\", \"\") as r1\nFROM `live`\nWHERE replay_url is not NULL and is_delete=0) b\n   ```\n\n3. SHELL脚本遍历目录，找出所以mp4文件，如果不在 `video_files.txt` 里，则删掉\n\n   ```shell\n#!/bin/bash\n#当前目录名\n   top_dir=$(pwd)\n   #把数据库查出来的文件名，加载到数组里\n   array=($(awk '{print $1}' video_files.txt))\n\n   #待删文件备份目录\n   del_backup_dir=\"/data/nhykt_oss_backup_before_delete\"\n   mkdir -p \"$del_backup_dir\"\n\n   #递归查找所有 mp4 文件，放到数组里\n   mp4array=($(find . -name \"*.mp4\" -type f))\n   for mp4 in ${mp4array[@]};\n   do\n   #因为find找出来的文件名，前面带\".\"，去掉第1个字符\n     m=(${mp4:1})\n     if [[ \"${array[@]}\" =~ \"$m\" ]]; then\n       echo \"$m exist: yes\"\n     else\n       echo \"$m exist: no\"\n       #用${m%/*}提取文件名的路径信息\n       mkdir -p \"$del_backup_dir/${m%/*}\"\n       #移动文件到待删备份目录\n       mv \".$m\" \"$del_backup_dir/$m\"\n     fi\n   done;\n   ```\n\n\n","slug":"清除OSS多余mp4文件","published":1,"updated":"2021-07-30T03:23:59.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdu000jhkax1c4r973o","content":"<ol>\n<li><p>以下场景用到视频文件，上传到 OSS </p>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>数据库表</th>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>视频录制</td>\n<td>tiac_prod.live</td>\n<td>replay_url</td>\n<td>只用来回调。腾讯回调，给出一个地址，会过期。<br>所以要上传到 OSS</td>\n</tr>\n<tr>\n<td>云课堂作业</td>\n<td>homework_question</td>\n<td>content_url</td>\n<td>content_type为2时，表示视频</td>\n</tr>\n<tr>\n<td></td>\n<td>question</td>\n<td>video_url</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>question_reply</td>\n<td>video_url</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>从数据库中导出视频文件列表（去掉域名），导出到 <code>video_files.txt</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> REPLACE(r1, &quot;https://oss-tiac.lconrise.cn&quot;, &quot;&quot;) <span class=\"keyword\">as</span> r2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> REPLACE(replay_url, &quot;http://oss-tiac.lconrise.cn&quot;, &quot;&quot;) <span class=\"keyword\">as</span> r1</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `live`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> replay_url <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">and</span> is_delete<span class=\"operator\">=</span><span class=\"number\">0</span>) b</span><br></pre></td></tr></table></figure></li>\n<li><p>SHELL脚本遍历目录，找出所以mp4文件，如果不在 <code>video_files.txt</code> 里，则删掉</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">当前目录名</span></span><br><span class=\"line\">   top_dir=$(pwd)</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">把数据库查出来的文件名，加载到数组里</span></span><br><span class=\"line\">   array=($(awk &#x27;&#123;print $1&#125;&#x27; video_files.txt))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">待删文件备份目录</span></span><br><span class=\"line\">   del_backup_dir=&quot;/data/nhykt_oss_backup_before_delete&quot;</span><br><span class=\"line\">   mkdir -p &quot;$del_backup_dir&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">递归查找所有 mp4 文件，放到数组里</span></span><br><span class=\"line\">   mp4array=($(find . -name &quot;*.mp4&quot; -type f))</span><br><span class=\"line\">   for mp4 in $&#123;mp4array[@]&#125;;</span><br><span class=\"line\">   do</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">因为find找出来的文件名，前面带<span class=\"string\">&quot;.&quot;</span>，去掉第1个字符</span></span><br><span class=\"line\">     m=($&#123;mp4:1&#125;)</span><br><span class=\"line\">     if [[ &quot;$&#123;array[@]&#125;&quot; =~ &quot;$m&quot; ]]; then</span><br><span class=\"line\">       echo &quot;$m exist: yes&quot;</span><br><span class=\"line\">     else</span><br><span class=\"line\">       echo &quot;$m exist: no&quot;</span><br><span class=\"line\">       #用$&#123;m%/*&#125;提取文件名的路径信息</span><br><span class=\"line\">       mkdir -p &quot;$del_backup_dir/$&#123;m%/*&#125;&quot;</span><br><span class=\"line\">       #移动文件到待删备份目录</span><br><span class=\"line\">       mv &quot;.$m&quot; &quot;$del_backup_dir/$m&quot;</span><br><span class=\"line\">     fi</span><br><span class=\"line\">   done;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<ol>\n<li><p>以下场景用到视频文件，上传到 OSS </p>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>数据库表</th>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>视频录制</td>\n<td>tiac_prod.live</td>\n<td>replay_url</td>\n<td>只用来回调。腾讯回调，给出一个地址，会过期。<br>所以要上传到 OSS</td>\n</tr>\n<tr>\n<td>云课堂作业</td>\n<td>homework_question</td>\n<td>content_url</td>\n<td>content_type为2时，表示视频</td>\n</tr>\n<tr>\n<td></td>\n<td>question</td>\n<td>video_url</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>question_reply</td>\n<td>video_url</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>从数据库中导出视频文件列表（去掉域名），导出到 <code>video_files.txt</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> REPLACE(r1, &quot;https://oss-tiac.lconrise.cn&quot;, &quot;&quot;) <span class=\"keyword\">as</span> r2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> REPLACE(replay_url, &quot;http://oss-tiac.lconrise.cn&quot;, &quot;&quot;) <span class=\"keyword\">as</span> r1</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `live`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> replay_url <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">and</span> is_delete<span class=\"operator\">=</span><span class=\"number\">0</span>) b</span><br></pre></td></tr></table></figure></li>\n<li><p>SHELL脚本遍历目录，找出所以mp4文件，如果不在 <code>video_files.txt</code> 里，则删掉</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">当前目录名</span></span><br><span class=\"line\">   top_dir=$(pwd)</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">把数据库查出来的文件名，加载到数组里</span></span><br><span class=\"line\">   array=($(awk &#x27;&#123;print $1&#125;&#x27; video_files.txt))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">待删文件备份目录</span></span><br><span class=\"line\">   del_backup_dir=&quot;/data/nhykt_oss_backup_before_delete&quot;</span><br><span class=\"line\">   mkdir -p &quot;$del_backup_dir&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">递归查找所有 mp4 文件，放到数组里</span></span><br><span class=\"line\">   mp4array=($(find . -name &quot;*.mp4&quot; -type f))</span><br><span class=\"line\">   for mp4 in $&#123;mp4array[@]&#125;;</span><br><span class=\"line\">   do</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">因为find找出来的文件名，前面带<span class=\"string\">&quot;.&quot;</span>，去掉第1个字符</span></span><br><span class=\"line\">     m=($&#123;mp4:1&#125;)</span><br><span class=\"line\">     if [[ &quot;$&#123;array[@]&#125;&quot; =~ &quot;$m&quot; ]]; then</span><br><span class=\"line\">       echo &quot;$m exist: yes&quot;</span><br><span class=\"line\">     else</span><br><span class=\"line\">       echo &quot;$m exist: no&quot;</span><br><span class=\"line\">       #用$&#123;m%/*&#125;提取文件名的路径信息</span><br><span class=\"line\">       mkdir -p &quot;$del_backup_dir/$&#123;m%/*&#125;&quot;</span><br><span class=\"line\">       #移动文件到待删备份目录</span><br><span class=\"line\">       mv &quot;.$m&quot; &quot;$del_backup_dir/$m&quot;</span><br><span class=\"line\">     fi</span><br><span class=\"line\">   done;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"部署规范v1.0","date":"2021-02-22T08:51:07.000Z","_content":"\n## 目的\n\n通过：\n\n1. 全镜像、全脚本部署\n2. 规范 镜像生成、部署的执行\n\n实现：利用 K8S 及衍生产品，动态扩展集群规模，节约成本\n\n\n\n## 演进路径\n\n现状   -> 1. Docker-compose 部署 -> 2. K8S部署 -> 3. 阿里云ASK部署\n\n目前只有南海云课堂、读思得、谙心公有云和谙心私有云 等四个工程项目，其中\n\n- 阶段1：\n  - 2月完成谙心公有云 Docker-compose 部署\n  - 3月份完成南海云课堂 Docker-compose 部署\n    - 可以先从第3台服务器开始改\n  - 读思得已经是 Docker-compose 部署\n- 阶段2：\n  - 4月份完成公司内部使用 K8S 部署上述四个工程项目\n- 阶段3：\n  - 5月份完成南海云课堂、读思得在阿里云 ASK 部署\n  - 6月份完成谙心私有云在阿里云 ASK 部署\n- 难点：\n  - K8S 和 ASK 部署后产生的日志文件，需要使用新的方式收集\n  - 南海云课堂有 IP 白名单，K8S 和 ASK 动态扩展节点带来新的 IP\n\n\n\n## 原则\n\n1. 工作可重现\n   - 系统所有镜像必须是使用 `Dockerfile` 定义，使用 `docker build`命令生成\n   - 基础应用镜像首选官方出品的，即 docker hub 或 软件开发方官网提供的\n     - 工程应用：`Tomcat`, `Memcached`, `MySQL`, `Redis`, `Zookeeper`, `Nginx`\n     - 编译环境：`Maven`, `Node`\n   - 基础镜像需要自定义，例如项目使用了 Oracle JDK 的库，官方出品的都是 OpenJDK 版本，缺少支持\n     - 自定义镜像的 `Dockerfile` 文件要上传到 GitHub 公开仓库或 公司 GitLab \n     - （可选）Docker Hub 和阿里云仓库支持绑定 GitHub 账号，支持 GitHub 项目自动编译成镜像\n   - 每个 *代码子项目* 生成一个镜像，每个镜像只含一个 *代码子项目*  *（例如 AdminApi, BizApi 即 代码子项目）*\n2. 数据与代码分享/数据持久化\n   - 容器不是虚拟机，只含代码及基础（默认配置）\n   - 容器数据的入方向：\n     - 使用 volumes 从宿主机映射自定义文件进入容器\n     - K8S 使用 ConfigMap 导入配置文件\n     - 使用外部配置中心，如 Apollo\n   - 容器数据的出方向\n     - 容器内部产生日志文件，对应目录是 volumes 映射进来的目录\n     - 日志通过消息队列传递出去，有专门的代码子项目从消息队列收集日志，保存到文件或者搜索引擎（ELK）\n3. 使用 yml 脚本，而不是手工命令行创建容器\n   - 创建容器时需要定义的信息多，命令行太长容易出错\n   - 命令行不利于备份和传播\n   - yml 脚本保证部署的透明性\n   - 注意 docker-compose 和 kubernetes 的 yml 脚本格式差异\n4. 网络约定（docker-compose 部署）（配图）\n   - 宿主机防火墙限制外部只能访问常用端口，如 80（HTTP）, 443（HTTPS）\n   - 宿主机的 Nginx ，把请求代理到每个代码项目对应的容器\n   - 每个 *工程项目* 创建一个网络，service 之间通过内网（service, link名，hostname）*（例如 四合书院、南海云课堂即工程项目）*\n   - 每个代码子项目在宿主机映射一个端口，建议使用4位数字端口，前2位一致*（例如谙心公有云的所有子项目都用 82xx 端口）*\n     - 宿主机的 Nginx 代理转发到 `localhost:后端服务映射的宿主机端口`\n     - 开发、运维使用 Navicat 通过 SSH 通道，连接 `localhost:MySQL映射的宿主机端口`\n5. 其它\n   - 每个工程项目使用独立一整套的软件，不混用。例如每个工程项目独立部署 MySQL, Redis 等\n   - 每个 `docker-compose.yml` 的同目录下放置 `.env` 文件，内容包含：`COMPOSE_PROJECT_NAME=工程项目代号` *（生成的容器名称有统一的前缀）*\n\n\n\n## 服务器\n\n- A. 开发人员机器：\n  - 自由调试，自由选择\n- B. 内网调试服务器：\n  - 使用 192.168.0.31\n  - 自由选择部署方式，建议使用 Docker-compose 方式部署\n  - docker 开放 2375 端口，供 IDE 连接。例如 Intellij IDEA， Visual Studio Code\n  - 从 IDE 调用打包镜像时，tag 名称为 `工程项目`-`开发人员`/`代码子项目`，例如 `tiac-mike/adminapi` 表示南海云课堂 mike 打包的 adminapi 镜像\n- C. 外网测试服务器：\n  - 使用阿里云服务器 112.74.105.145\n  - Docker-compose 方式部署\n- D. 演示服务器\n  - 使用阿里云服务器 demo.callwine.net\n  - 与正式服同样要求\n- E. 正式服务器\n  - Docker-compose 方式部署\n- F. 代码编译服务器\n  - 使用 192.168.0.49\n\n\n\n## 开发过程\n\n1. 本地机器调试\n\n   - （略）\n\n2. 与其它开发人员调试\n\n   本地编译完成，然后选择：\n\n    - 手工部署\n    -  IDE 连接内网测试服务器，在内网测试服务器上生成镜像*（镜像名称内部使用，不上传到公司在阿里云的仓库）*\n      - 参考 WIKI 上的设置和使用说明\n      - 与 drone 使用同样的 Dockerfile（实际文件名 `Dockerfile.drone`），亦可用来调试 Dockerfile \n\n3. 提交测试\n\n   - git 打 tag，解发 Drone 编译，钉钉收到镜像编译成功的消息*（会上传到公司在阿里云的仓库）*，然后\n   - 告诉运维 tag 版本号\n   - 运维在测试服务器执行 `docker-compose pull && docker-compose up -d` 即可更新\n\n4. 正式部署\n\n   - 告诉运维要发布的 tag 版本号\n   - 运维在正式服务器执行 `docker-compose pull && docker-compose up -d` 即可更新\n\n\n\n## 最后\n\n- 服务器开发人员学会使用 Docker\n- 推荐开发人员使用 markdown 写文档：\n  - GitLab 项目根目录的 readme.md\n  - 公司 wiki 文章分享\n","source":"_posts/部署规范v1.0.md","raw":"---\ntitle: 部署规范v1.0\ndate: 2021-02-22 16:51:07\ncategories:\n  - 研发流程\ntags:\n  - devops\n---\n\n## 目的\n\n通过：\n\n1. 全镜像、全脚本部署\n2. 规范 镜像生成、部署的执行\n\n实现：利用 K8S 及衍生产品，动态扩展集群规模，节约成本\n\n\n\n## 演进路径\n\n现状   -> 1. Docker-compose 部署 -> 2. K8S部署 -> 3. 阿里云ASK部署\n\n目前只有南海云课堂、读思得、谙心公有云和谙心私有云 等四个工程项目，其中\n\n- 阶段1：\n  - 2月完成谙心公有云 Docker-compose 部署\n  - 3月份完成南海云课堂 Docker-compose 部署\n    - 可以先从第3台服务器开始改\n  - 读思得已经是 Docker-compose 部署\n- 阶段2：\n  - 4月份完成公司内部使用 K8S 部署上述四个工程项目\n- 阶段3：\n  - 5月份完成南海云课堂、读思得在阿里云 ASK 部署\n  - 6月份完成谙心私有云在阿里云 ASK 部署\n- 难点：\n  - K8S 和 ASK 部署后产生的日志文件，需要使用新的方式收集\n  - 南海云课堂有 IP 白名单，K8S 和 ASK 动态扩展节点带来新的 IP\n\n\n\n## 原则\n\n1. 工作可重现\n   - 系统所有镜像必须是使用 `Dockerfile` 定义，使用 `docker build`命令生成\n   - 基础应用镜像首选官方出品的，即 docker hub 或 软件开发方官网提供的\n     - 工程应用：`Tomcat`, `Memcached`, `MySQL`, `Redis`, `Zookeeper`, `Nginx`\n     - 编译环境：`Maven`, `Node`\n   - 基础镜像需要自定义，例如项目使用了 Oracle JDK 的库，官方出品的都是 OpenJDK 版本，缺少支持\n     - 自定义镜像的 `Dockerfile` 文件要上传到 GitHub 公开仓库或 公司 GitLab \n     - （可选）Docker Hub 和阿里云仓库支持绑定 GitHub 账号，支持 GitHub 项目自动编译成镜像\n   - 每个 *代码子项目* 生成一个镜像，每个镜像只含一个 *代码子项目*  *（例如 AdminApi, BizApi 即 代码子项目）*\n2. 数据与代码分享/数据持久化\n   - 容器不是虚拟机，只含代码及基础（默认配置）\n   - 容器数据的入方向：\n     - 使用 volumes 从宿主机映射自定义文件进入容器\n     - K8S 使用 ConfigMap 导入配置文件\n     - 使用外部配置中心，如 Apollo\n   - 容器数据的出方向\n     - 容器内部产生日志文件，对应目录是 volumes 映射进来的目录\n     - 日志通过消息队列传递出去，有专门的代码子项目从消息队列收集日志，保存到文件或者搜索引擎（ELK）\n3. 使用 yml 脚本，而不是手工命令行创建容器\n   - 创建容器时需要定义的信息多，命令行太长容易出错\n   - 命令行不利于备份和传播\n   - yml 脚本保证部署的透明性\n   - 注意 docker-compose 和 kubernetes 的 yml 脚本格式差异\n4. 网络约定（docker-compose 部署）（配图）\n   - 宿主机防火墙限制外部只能访问常用端口，如 80（HTTP）, 443（HTTPS）\n   - 宿主机的 Nginx ，把请求代理到每个代码项目对应的容器\n   - 每个 *工程项目* 创建一个网络，service 之间通过内网（service, link名，hostname）*（例如 四合书院、南海云课堂即工程项目）*\n   - 每个代码子项目在宿主机映射一个端口，建议使用4位数字端口，前2位一致*（例如谙心公有云的所有子项目都用 82xx 端口）*\n     - 宿主机的 Nginx 代理转发到 `localhost:后端服务映射的宿主机端口`\n     - 开发、运维使用 Navicat 通过 SSH 通道，连接 `localhost:MySQL映射的宿主机端口`\n5. 其它\n   - 每个工程项目使用独立一整套的软件，不混用。例如每个工程项目独立部署 MySQL, Redis 等\n   - 每个 `docker-compose.yml` 的同目录下放置 `.env` 文件，内容包含：`COMPOSE_PROJECT_NAME=工程项目代号` *（生成的容器名称有统一的前缀）*\n\n\n\n## 服务器\n\n- A. 开发人员机器：\n  - 自由调试，自由选择\n- B. 内网调试服务器：\n  - 使用 192.168.0.31\n  - 自由选择部署方式，建议使用 Docker-compose 方式部署\n  - docker 开放 2375 端口，供 IDE 连接。例如 Intellij IDEA， Visual Studio Code\n  - 从 IDE 调用打包镜像时，tag 名称为 `工程项目`-`开发人员`/`代码子项目`，例如 `tiac-mike/adminapi` 表示南海云课堂 mike 打包的 adminapi 镜像\n- C. 外网测试服务器：\n  - 使用阿里云服务器 112.74.105.145\n  - Docker-compose 方式部署\n- D. 演示服务器\n  - 使用阿里云服务器 demo.callwine.net\n  - 与正式服同样要求\n- E. 正式服务器\n  - Docker-compose 方式部署\n- F. 代码编译服务器\n  - 使用 192.168.0.49\n\n\n\n## 开发过程\n\n1. 本地机器调试\n\n   - （略）\n\n2. 与其它开发人员调试\n\n   本地编译完成，然后选择：\n\n    - 手工部署\n    -  IDE 连接内网测试服务器，在内网测试服务器上生成镜像*（镜像名称内部使用，不上传到公司在阿里云的仓库）*\n      - 参考 WIKI 上的设置和使用说明\n      - 与 drone 使用同样的 Dockerfile（实际文件名 `Dockerfile.drone`），亦可用来调试 Dockerfile \n\n3. 提交测试\n\n   - git 打 tag，解发 Drone 编译，钉钉收到镜像编译成功的消息*（会上传到公司在阿里云的仓库）*，然后\n   - 告诉运维 tag 版本号\n   - 运维在测试服务器执行 `docker-compose pull && docker-compose up -d` 即可更新\n\n4. 正式部署\n\n   - 告诉运维要发布的 tag 版本号\n   - 运维在正式服务器执行 `docker-compose pull && docker-compose up -d` 即可更新\n\n\n\n## 最后\n\n- 服务器开发人员学会使用 Docker\n- 推荐开发人员使用 markdown 写文档：\n  - GitLab 项目根目录的 readme.md\n  - 公司 wiki 文章分享\n","slug":"部署规范v1.0","published":1,"updated":"2021-07-30T03:22:57.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdx000nhkax7bqa9g05","content":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>通过：</p>\n<ol>\n<li>全镜像、全脚本部署</li>\n<li>规范 镜像生成、部署的执行</li>\n</ol>\n<p>实现：利用 K8S 及衍生产品，动态扩展集群规模，节约成本</p>\n<h2 id=\"演进路径\"><a href=\"#演进路径\" class=\"headerlink\" title=\"演进路径\"></a>演进路径</h2><p>现状   -&gt; 1. Docker-compose 部署 -&gt; 2. K8S部署 -&gt; 3. 阿里云ASK部署</p>\n<p>目前只有南海云课堂、读思得、谙心公有云和谙心私有云 等四个工程项目，其中</p>\n<ul>\n<li>阶段1：<ul>\n<li>2月完成谙心公有云 Docker-compose 部署</li>\n<li>3月份完成南海云课堂 Docker-compose 部署<ul>\n<li>可以先从第3台服务器开始改</li>\n</ul>\n</li>\n<li>读思得已经是 Docker-compose 部署</li>\n</ul>\n</li>\n<li>阶段2：<ul>\n<li>4月份完成公司内部使用 K8S 部署上述四个工程项目</li>\n</ul>\n</li>\n<li>阶段3：<ul>\n<li>5月份完成南海云课堂、读思得在阿里云 ASK 部署</li>\n<li>6月份完成谙心私有云在阿里云 ASK 部署</li>\n</ul>\n</li>\n<li>难点：<ul>\n<li>K8S 和 ASK 部署后产生的日志文件，需要使用新的方式收集</li>\n<li>南海云课堂有 IP 白名单，K8S 和 ASK 动态扩展节点带来新的 IP</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><ol>\n<li>工作可重现<ul>\n<li>系统所有镜像必须是使用 <code>Dockerfile</code> 定义，使用 <code>docker build</code>命令生成</li>\n<li>基础应用镜像首选官方出品的，即 docker hub 或 软件开发方官网提供的<ul>\n<li>工程应用：<code>Tomcat</code>, <code>Memcached</code>, <code>MySQL</code>, <code>Redis</code>, <code>Zookeeper</code>, <code>Nginx</code></li>\n<li>编译环境：<code>Maven</code>, <code>Node</code></li>\n</ul>\n</li>\n<li>基础镜像需要自定义，例如项目使用了 Oracle JDK 的库，官方出品的都是 OpenJDK 版本，缺少支持<ul>\n<li>自定义镜像的 <code>Dockerfile</code> 文件要上传到 GitHub 公开仓库或 公司 GitLab </li>\n<li>（可选）Docker Hub 和阿里云仓库支持绑定 GitHub 账号，支持 GitHub 项目自动编译成镜像</li>\n</ul>\n</li>\n<li>每个 <em>代码子项目</em> 生成一个镜像，每个镜像只含一个 <em>代码子项目</em>  <em>（例如 AdminApi, BizApi 即 代码子项目）</em></li>\n</ul>\n</li>\n<li>数据与代码分享/数据持久化<ul>\n<li>容器不是虚拟机，只含代码及基础（默认配置）</li>\n<li>容器数据的入方向：<ul>\n<li>使用 volumes 从宿主机映射自定义文件进入容器</li>\n<li>K8S 使用 ConfigMap 导入配置文件</li>\n<li>使用外部配置中心，如 Apollo</li>\n</ul>\n</li>\n<li>容器数据的出方向<ul>\n<li>容器内部产生日志文件，对应目录是 volumes 映射进来的目录</li>\n<li>日志通过消息队列传递出去，有专门的代码子项目从消息队列收集日志，保存到文件或者搜索引擎（ELK）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用 yml 脚本，而不是手工命令行创建容器<ul>\n<li>创建容器时需要定义的信息多，命令行太长容易出错</li>\n<li>命令行不利于备份和传播</li>\n<li>yml 脚本保证部署的透明性</li>\n<li>注意 docker-compose 和 kubernetes 的 yml 脚本格式差异</li>\n</ul>\n</li>\n<li>网络约定（docker-compose 部署）（配图）<ul>\n<li>宿主机防火墙限制外部只能访问常用端口，如 80（HTTP）, 443（HTTPS）</li>\n<li>宿主机的 Nginx ，把请求代理到每个代码项目对应的容器</li>\n<li>每个 <em>工程项目</em> 创建一个网络，service 之间通过内网（service, link名，hostname）<em>（例如 四合书院、南海云课堂即工程项目）</em></li>\n<li>每个代码子项目在宿主机映射一个端口，建议使用4位数字端口，前2位一致<em>（例如谙心公有云的所有子项目都用 82xx 端口）</em><ul>\n<li>宿主机的 Nginx 代理转发到 <code>localhost:后端服务映射的宿主机端口</code></li>\n<li>开发、运维使用 Navicat 通过 SSH 通道，连接 <code>localhost:MySQL映射的宿主机端口</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其它<ul>\n<li>每个工程项目使用独立一整套的软件，不混用。例如每个工程项目独立部署 MySQL, Redis 等</li>\n<li>每个 <code>docker-compose.yml</code> 的同目录下放置 <code>.env</code> 文件，内容包含：<code>COMPOSE_PROJECT_NAME=工程项目代号</code> <em>（生成的容器名称有统一的前缀）</em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><ul>\n<li>A. 开发人员机器：<ul>\n<li>自由调试，自由选择</li>\n</ul>\n</li>\n<li>B. 内网调试服务器：<ul>\n<li>使用 192.168.0.31</li>\n<li>自由选择部署方式，建议使用 Docker-compose 方式部署</li>\n<li>docker 开放 2375 端口，供 IDE 连接。例如 Intellij IDEA， Visual Studio Code</li>\n<li>从 IDE 调用打包镜像时，tag 名称为 <code>工程项目</code>-<code>开发人员</code>/<code>代码子项目</code>，例如 <code>tiac-mike/adminapi</code> 表示南海云课堂 mike 打包的 adminapi 镜像</li>\n</ul>\n</li>\n<li>C. 外网测试服务器：<ul>\n<li>使用阿里云服务器 112.74.105.145</li>\n<li>Docker-compose 方式部署</li>\n</ul>\n</li>\n<li>D. 演示服务器<ul>\n<li>使用阿里云服务器 demo.callwine.net</li>\n<li>与正式服同样要求</li>\n</ul>\n</li>\n<li>E. 正式服务器<ul>\n<li>Docker-compose 方式部署</li>\n</ul>\n</li>\n<li>F. 代码编译服务器<ul>\n<li>使用 192.168.0.49</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><ol>\n<li><p>本地机器调试</p>\n<ul>\n<li>（略）</li>\n</ul>\n</li>\n<li><p>与其它开发人员调试</p>\n<p>本地编译完成，然后选择：</p>\n<ul>\n<li>手工部署</li>\n<li> IDE 连接内网测试服务器，在内网测试服务器上生成镜像<em>（镜像名称内部使用，不上传到公司在阿里云的仓库）</em></li>\n<li>参考 WIKI 上的设置和使用说明</li>\n<li>与 drone 使用同样的 Dockerfile（实际文件名 <code>Dockerfile.drone</code>），亦可用来调试 Dockerfile </li>\n</ul>\n</li>\n<li><p>提交测试</p>\n<ul>\n<li>git 打 tag，解发 Drone 编译，钉钉收到镜像编译成功的消息<em>（会上传到公司在阿里云的仓库）</em>，然后</li>\n<li>告诉运维 tag 版本号</li>\n<li>运维在测试服务器执行 <code>docker-compose pull &amp;&amp; docker-compose up -d</code> 即可更新</li>\n</ul>\n</li>\n<li><p>正式部署</p>\n<ul>\n<li>告诉运维要发布的 tag 版本号</li>\n<li>运维在正式服务器执行 <code>docker-compose pull &amp;&amp; docker-compose up -d</code> 即可更新</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><ul>\n<li>服务器开发人员学会使用 Docker</li>\n<li>推荐开发人员使用 markdown 写文档：<ul>\n<li>GitLab 项目根目录的 readme.md</li>\n<li>公司 wiki 文章分享</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>通过：</p>\n<ol>\n<li>全镜像、全脚本部署</li>\n<li>规范 镜像生成、部署的执行</li>\n</ol>\n<p>实现：利用 K8S 及衍生产品，动态扩展集群规模，节约成本</p>\n<h2 id=\"演进路径\"><a href=\"#演进路径\" class=\"headerlink\" title=\"演进路径\"></a>演进路径</h2><p>现状   -&gt; 1. Docker-compose 部署 -&gt; 2. K8S部署 -&gt; 3. 阿里云ASK部署</p>\n<p>目前只有南海云课堂、读思得、谙心公有云和谙心私有云 等四个工程项目，其中</p>\n<ul>\n<li>阶段1：<ul>\n<li>2月完成谙心公有云 Docker-compose 部署</li>\n<li>3月份完成南海云课堂 Docker-compose 部署<ul>\n<li>可以先从第3台服务器开始改</li>\n</ul>\n</li>\n<li>读思得已经是 Docker-compose 部署</li>\n</ul>\n</li>\n<li>阶段2：<ul>\n<li>4月份完成公司内部使用 K8S 部署上述四个工程项目</li>\n</ul>\n</li>\n<li>阶段3：<ul>\n<li>5月份完成南海云课堂、读思得在阿里云 ASK 部署</li>\n<li>6月份完成谙心私有云在阿里云 ASK 部署</li>\n</ul>\n</li>\n<li>难点：<ul>\n<li>K8S 和 ASK 部署后产生的日志文件，需要使用新的方式收集</li>\n<li>南海云课堂有 IP 白名单，K8S 和 ASK 动态扩展节点带来新的 IP</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><ol>\n<li>工作可重现<ul>\n<li>系统所有镜像必须是使用 <code>Dockerfile</code> 定义，使用 <code>docker build</code>命令生成</li>\n<li>基础应用镜像首选官方出品的，即 docker hub 或 软件开发方官网提供的<ul>\n<li>工程应用：<code>Tomcat</code>, <code>Memcached</code>, <code>MySQL</code>, <code>Redis</code>, <code>Zookeeper</code>, <code>Nginx</code></li>\n<li>编译环境：<code>Maven</code>, <code>Node</code></li>\n</ul>\n</li>\n<li>基础镜像需要自定义，例如项目使用了 Oracle JDK 的库，官方出品的都是 OpenJDK 版本，缺少支持<ul>\n<li>自定义镜像的 <code>Dockerfile</code> 文件要上传到 GitHub 公开仓库或 公司 GitLab </li>\n<li>（可选）Docker Hub 和阿里云仓库支持绑定 GitHub 账号，支持 GitHub 项目自动编译成镜像</li>\n</ul>\n</li>\n<li>每个 <em>代码子项目</em> 生成一个镜像，每个镜像只含一个 <em>代码子项目</em>  <em>（例如 AdminApi, BizApi 即 代码子项目）</em></li>\n</ul>\n</li>\n<li>数据与代码分享/数据持久化<ul>\n<li>容器不是虚拟机，只含代码及基础（默认配置）</li>\n<li>容器数据的入方向：<ul>\n<li>使用 volumes 从宿主机映射自定义文件进入容器</li>\n<li>K8S 使用 ConfigMap 导入配置文件</li>\n<li>使用外部配置中心，如 Apollo</li>\n</ul>\n</li>\n<li>容器数据的出方向<ul>\n<li>容器内部产生日志文件，对应目录是 volumes 映射进来的目录</li>\n<li>日志通过消息队列传递出去，有专门的代码子项目从消息队列收集日志，保存到文件或者搜索引擎（ELK）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用 yml 脚本，而不是手工命令行创建容器<ul>\n<li>创建容器时需要定义的信息多，命令行太长容易出错</li>\n<li>命令行不利于备份和传播</li>\n<li>yml 脚本保证部署的透明性</li>\n<li>注意 docker-compose 和 kubernetes 的 yml 脚本格式差异</li>\n</ul>\n</li>\n<li>网络约定（docker-compose 部署）（配图）<ul>\n<li>宿主机防火墙限制外部只能访问常用端口，如 80（HTTP）, 443（HTTPS）</li>\n<li>宿主机的 Nginx ，把请求代理到每个代码项目对应的容器</li>\n<li>每个 <em>工程项目</em> 创建一个网络，service 之间通过内网（service, link名，hostname）<em>（例如 四合书院、南海云课堂即工程项目）</em></li>\n<li>每个代码子项目在宿主机映射一个端口，建议使用4位数字端口，前2位一致<em>（例如谙心公有云的所有子项目都用 82xx 端口）</em><ul>\n<li>宿主机的 Nginx 代理转发到 <code>localhost:后端服务映射的宿主机端口</code></li>\n<li>开发、运维使用 Navicat 通过 SSH 通道，连接 <code>localhost:MySQL映射的宿主机端口</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其它<ul>\n<li>每个工程项目使用独立一整套的软件，不混用。例如每个工程项目独立部署 MySQL, Redis 等</li>\n<li>每个 <code>docker-compose.yml</code> 的同目录下放置 <code>.env</code> 文件，内容包含：<code>COMPOSE_PROJECT_NAME=工程项目代号</code> <em>（生成的容器名称有统一的前缀）</em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><ul>\n<li>A. 开发人员机器：<ul>\n<li>自由调试，自由选择</li>\n</ul>\n</li>\n<li>B. 内网调试服务器：<ul>\n<li>使用 192.168.0.31</li>\n<li>自由选择部署方式，建议使用 Docker-compose 方式部署</li>\n<li>docker 开放 2375 端口，供 IDE 连接。例如 Intellij IDEA， Visual Studio Code</li>\n<li>从 IDE 调用打包镜像时，tag 名称为 <code>工程项目</code>-<code>开发人员</code>/<code>代码子项目</code>，例如 <code>tiac-mike/adminapi</code> 表示南海云课堂 mike 打包的 adminapi 镜像</li>\n</ul>\n</li>\n<li>C. 外网测试服务器：<ul>\n<li>使用阿里云服务器 112.74.105.145</li>\n<li>Docker-compose 方式部署</li>\n</ul>\n</li>\n<li>D. 演示服务器<ul>\n<li>使用阿里云服务器 demo.callwine.net</li>\n<li>与正式服同样要求</li>\n</ul>\n</li>\n<li>E. 正式服务器<ul>\n<li>Docker-compose 方式部署</li>\n</ul>\n</li>\n<li>F. 代码编译服务器<ul>\n<li>使用 192.168.0.49</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><ol>\n<li><p>本地机器调试</p>\n<ul>\n<li>（略）</li>\n</ul>\n</li>\n<li><p>与其它开发人员调试</p>\n<p>本地编译完成，然后选择：</p>\n<ul>\n<li>手工部署</li>\n<li> IDE 连接内网测试服务器，在内网测试服务器上生成镜像<em>（镜像名称内部使用，不上传到公司在阿里云的仓库）</em></li>\n<li>参考 WIKI 上的设置和使用说明</li>\n<li>与 drone 使用同样的 Dockerfile（实际文件名 <code>Dockerfile.drone</code>），亦可用来调试 Dockerfile </li>\n</ul>\n</li>\n<li><p>提交测试</p>\n<ul>\n<li>git 打 tag，解发 Drone 编译，钉钉收到镜像编译成功的消息<em>（会上传到公司在阿里云的仓库）</em>，然后</li>\n<li>告诉运维 tag 版本号</li>\n<li>运维在测试服务器执行 <code>docker-compose pull &amp;&amp; docker-compose up -d</code> 即可更新</li>\n</ul>\n</li>\n<li><p>正式部署</p>\n<ul>\n<li>告诉运维要发布的 tag 版本号</li>\n<li>运维在正式服务器执行 <code>docker-compose pull &amp;&amp; docker-compose up -d</code> 即可更新</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><ul>\n<li>服务器开发人员学会使用 Docker</li>\n<li>推荐开发人员使用 markdown 写文档：<ul>\n<li>GitLab 项目根目录的 readme.md</li>\n<li>公司 wiki 文章分享</li>\n</ul>\n</li>\n</ul>\n"},{"title":"项目部署要求","date":"2021-05-21T08:51:07.000Z","_content":"\n# 部署要求\n\n以下要求只针对部署到服务器上的项目。\n\n## 一、版本管理\n\n1. 传统方式部署的（目前只有安雷），部署包放到公司 FTP。禁止使用 QQ、U盘等直接传给运维\n\n   如果紧急情况的部署（开发在公司以外修改代码），部署包要用邮件发送，后面补到 FTP\n\n2. 容器化部署的，镜像放在公司在阿里云的镜像仓库\n\n## 二、正式服部署\n\n部署到（南海云）正式服的版本，必须经过测试。测试人员邮件回复“测试通过”且测试主管要知晓，才可以部署到正式服\n\n1. 发起人\n\n   部署到正式服，应该由`项目经理`或`测试经理`，邮件发出部署要求\n\n2. 部署内容\n\n   部署的脚本及配置文件，以测试服上已验证的版本为基础，\n\n   版本运维根据正式环境改变里面的值\n\n   不允许开发人员专门重新打包”正式服版本“\n   \n2. 要求\n   \n   运维需要明白配置文件里每个参数的含义，独立配置。不应该由开发人员提供\n## 三、前后端分离\n\n* 项目使用前后端分离的方式，`前端页面` 和 `后端接口` 项目应部署在不同的实体服务器上\n  * 即使后端接口挂起，前端页面也能显示内容\n  * 前端页面和后端接口分别使用单独的域名\n\n## 四、域名\n\n除公司内网部署的项目外，其它项目：\n\n- 网页、接口都应该使用域名访问\n- 必须使用 HTTPS访问，不允许  HTTP 访问。（需要设置 HTTP 强制跳转到 HTTPS）\n\n  \n\n  \n\n","source":"_posts/项目部署要求.md","raw":"---\ntitle: 项目部署要求\ndate: 2021-05-21 16:51:07\ncategories:\n  - 研发流程\ntags:\n  - devops\n---\n\n# 部署要求\n\n以下要求只针对部署到服务器上的项目。\n\n## 一、版本管理\n\n1. 传统方式部署的（目前只有安雷），部署包放到公司 FTP。禁止使用 QQ、U盘等直接传给运维\n\n   如果紧急情况的部署（开发在公司以外修改代码），部署包要用邮件发送，后面补到 FTP\n\n2. 容器化部署的，镜像放在公司在阿里云的镜像仓库\n\n## 二、正式服部署\n\n部署到（南海云）正式服的版本，必须经过测试。测试人员邮件回复“测试通过”且测试主管要知晓，才可以部署到正式服\n\n1. 发起人\n\n   部署到正式服，应该由`项目经理`或`测试经理`，邮件发出部署要求\n\n2. 部署内容\n\n   部署的脚本及配置文件，以测试服上已验证的版本为基础，\n\n   版本运维根据正式环境改变里面的值\n\n   不允许开发人员专门重新打包”正式服版本“\n   \n2. 要求\n   \n   运维需要明白配置文件里每个参数的含义，独立配置。不应该由开发人员提供\n## 三、前后端分离\n\n* 项目使用前后端分离的方式，`前端页面` 和 `后端接口` 项目应部署在不同的实体服务器上\n  * 即使后端接口挂起，前端页面也能显示内容\n  * 前端页面和后端接口分别使用单独的域名\n\n## 四、域名\n\n除公司内网部署的项目外，其它项目：\n\n- 网页、接口都应该使用域名访问\n- 必须使用 HTTPS访问，不允许  HTTP 访问。（需要设置 HTTP 强制跳转到 HTTPS）\n\n  \n\n  \n\n","slug":"项目部署要求","published":1,"updated":"2021-07-30T03:22:44.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpt6wdz000phkax1o3jgvel","content":"<h1 id=\"部署要求\"><a href=\"#部署要求\" class=\"headerlink\" title=\"部署要求\"></a>部署要求</h1><p>以下要求只针对部署到服务器上的项目。</p>\n<h2 id=\"一、版本管理\"><a href=\"#一、版本管理\" class=\"headerlink\" title=\"一、版本管理\"></a>一、版本管理</h2><ol>\n<li><p>传统方式部署的（目前只有安雷），部署包放到公司 FTP。禁止使用 QQ、U盘等直接传给运维</p>\n<p>如果紧急情况的部署（开发在公司以外修改代码），部署包要用邮件发送，后面补到 FTP</p>\n</li>\n<li><p>容器化部署的，镜像放在公司在阿里云的镜像仓库</p>\n</li>\n</ol>\n<h2 id=\"二、正式服部署\"><a href=\"#二、正式服部署\" class=\"headerlink\" title=\"二、正式服部署\"></a>二、正式服部署</h2><p>部署到（南海云）正式服的版本，必须经过测试。测试人员邮件回复“测试通过”且测试主管要知晓，才可以部署到正式服</p>\n<ol>\n<li><p>发起人</p>\n<p>部署到正式服，应该由<code>项目经理</code>或<code>测试经理</code>，邮件发出部署要求</p>\n</li>\n<li><p>部署内容</p>\n<p>部署的脚本及配置文件，以测试服上已验证的版本为基础，</p>\n<p>版本运维根据正式环境改变里面的值</p>\n<p>不允许开发人员专门重新打包”正式服版本“</p>\n</li>\n<li><p>要求</p>\n<p>运维需要明白配置文件里每个参数的含义，独立配置。不应该由开发人员提供</p>\n<h2 id=\"三、前后端分离\"><a href=\"#三、前后端分离\" class=\"headerlink\" title=\"三、前后端分离\"></a>三、前后端分离</h2></li>\n</ol>\n<ul>\n<li>项目使用前后端分离的方式，<code>前端页面</code> 和 <code>后端接口</code> 项目应部署在不同的实体服务器上<ul>\n<li>即使后端接口挂起，前端页面也能显示内容</li>\n<li>前端页面和后端接口分别使用单独的域名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四、域名\"><a href=\"#四、域名\" class=\"headerlink\" title=\"四、域名\"></a>四、域名</h2><p>除公司内网部署的项目外，其它项目：</p>\n<ul>\n<li>网页、接口都应该使用域名访问</li>\n<li>必须使用 HTTPS访问，不允许  HTTP 访问。（需要设置 HTTP 强制跳转到 HTTPS）</li>\n</ul>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"部署要求\"><a href=\"#部署要求\" class=\"headerlink\" title=\"部署要求\"></a>部署要求</h1><p>以下要求只针对部署到服务器上的项目。</p>\n<h2 id=\"一、版本管理\"><a href=\"#一、版本管理\" class=\"headerlink\" title=\"一、版本管理\"></a>一、版本管理</h2><ol>\n<li><p>传统方式部署的（目前只有安雷），部署包放到公司 FTP。禁止使用 QQ、U盘等直接传给运维</p>\n<p>如果紧急情况的部署（开发在公司以外修改代码），部署包要用邮件发送，后面补到 FTP</p>\n</li>\n<li><p>容器化部署的，镜像放在公司在阿里云的镜像仓库</p>\n</li>\n</ol>\n<h2 id=\"二、正式服部署\"><a href=\"#二、正式服部署\" class=\"headerlink\" title=\"二、正式服部署\"></a>二、正式服部署</h2><p>部署到（南海云）正式服的版本，必须经过测试。测试人员邮件回复“测试通过”且测试主管要知晓，才可以部署到正式服</p>\n<ol>\n<li><p>发起人</p>\n<p>部署到正式服，应该由<code>项目经理</code>或<code>测试经理</code>，邮件发出部署要求</p>\n</li>\n<li><p>部署内容</p>\n<p>部署的脚本及配置文件，以测试服上已验证的版本为基础，</p>\n<p>版本运维根据正式环境改变里面的值</p>\n<p>不允许开发人员专门重新打包”正式服版本“</p>\n</li>\n<li><p>要求</p>\n<p>运维需要明白配置文件里每个参数的含义，独立配置。不应该由开发人员提供</p>\n<h2 id=\"三、前后端分离\"><a href=\"#三、前后端分离\" class=\"headerlink\" title=\"三、前后端分离\"></a>三、前后端分离</h2></li>\n</ol>\n<ul>\n<li>项目使用前后端分离的方式，<code>前端页面</code> 和 <code>后端接口</code> 项目应部署在不同的实体服务器上<ul>\n<li>即使后端接口挂起，前端页面也能显示内容</li>\n<li>前端页面和后端接口分别使用单独的域名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四、域名\"><a href=\"#四、域名\" class=\"headerlink\" title=\"四、域名\"></a>四、域名</h2><p>除公司内网部署的项目外，其它项目：</p>\n<ul>\n<li>网页、接口都应该使用域名访问</li>\n<li>必须使用 HTTPS访问，不允许  HTTP 访问。（需要设置 HTTP 强制跳转到 HTTPS）</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrpt6wdd0001hkax3gdz1cfn","category_id":"ckrpt6wdk0004hkax5j4l466i","_id":"ckrpt6wds000ehkaxbl0p7ye5"},{"post_id":"ckrpt6wdi0003hkax57lpbl64","category_id":"ckrpt6wdp0009hkax9wlzag7i","_id":"ckrpt6wdv000khkaxhcxx69be"},{"post_id":"ckrpt6wdt000hhkaxhqu0e5q6","category_id":"ckrpt6wdp0009hkax9wlzag7i","_id":"ckrpt6we0000qhkax7cohc15r"},{"post_id":"ckrpt6wdx000nhkax7bqa9g05","category_id":"ckrpt6wdp0009hkax9wlzag7i","_id":"ckrpt6we2000vhkaxgjnf6ryg"},{"post_id":"ckrpt6wdz000phkax1o3jgvel","category_id":"ckrpt6wdp0009hkax9wlzag7i","_id":"ckrpt6we4000zhkaxc13k671m"},{"post_id":"ckrpt6wdm0006hkax8a5kfv8g","category_id":"ckrpt6wds000fhkax38dtfsgm","_id":"ckrpt6we8001ahkaxeesqfz6e"},{"post_id":"ckrpt6wdm0006hkax8a5kfv8g","category_id":"ckrpt6we60014hkax7cq62ccm","_id":"ckrpt6wea001chkax6w4b8w4w"},{"post_id":"ckrpt6wdn0007hkaxcpzz4n8k","category_id":"ckrpt6wds000fhkax38dtfsgm","_id":"ckrpt6web001ghkaxcv0f1c7f"},{"post_id":"ckrpt6wdn0007hkaxcpzz4n8k","category_id":"ckrpt6we60014hkax7cq62ccm","_id":"ckrpt6wec001jhkaxd69l6q3m"},{"post_id":"ckrpt6wdo0008hkax9pax0y8d","category_id":"ckrpt6we0000rhkax34xrf4md","_id":"ckrpt6wec001lhkaxf0h42dzk"},{"post_id":"ckrpt6wdo0008hkax9pax0y8d","category_id":"ckrpt6wea001dhkax5k9r1dh9","_id":"ckrpt6wed001ohkaxf7gi8dyy"},{"post_id":"ckrpt6wdq000chkax8rbqb09m","category_id":"ckrpt6we0000rhkax34xrf4md","_id":"ckrpt6wed001qhkaxbkd75ei0"},{"post_id":"ckrpt6wdq000chkax8rbqb09m","category_id":"ckrpt6web001hhkaxho68biv1","_id":"ckrpt6wee001rhkaxdrf3a4xe"},{"post_id":"ckrpt6wdr000dhkaxdgex4aqs","category_id":"ckrpt6we0000rhkax34xrf4md","_id":"ckrpt6wee001shkaxa6ow37e0"},{"post_id":"ckrpt6wdr000dhkaxdgex4aqs","category_id":"ckrpt6web001hhkaxho68biv1","_id":"ckrpt6wee001thkaxb02w6pnq"},{"post_id":"ckrpt6wdu000jhkax1c4r973o","category_id":"ckrpt6we0000rhkax34xrf4md","_id":"ckrpt6wee001uhkaxd2zneas9"},{"post_id":"ckrpt6wdu000jhkax1c4r973o","category_id":"ckrpt6web001hhkaxho68biv1","_id":"ckrpt6wee001vhkax4gj33mqs"}],"PostTag":[{"post_id":"ckrpt6wdd0001hkax3gdz1cfn","tag_id":"ckrpt6wdl0005hkaxf00o0wu5","_id":"ckrpt6wdq000bhkax1wdyf27i"},{"post_id":"ckrpt6wdi0003hkax57lpbl64","tag_id":"ckrpt6wdp000ahkax68lz1hub","_id":"ckrpt6wdt000ihkaxfjqk7lxp"},{"post_id":"ckrpt6wdm0006hkax8a5kfv8g","tag_id":"ckrpt6wds000ghkax7yeea9xk","_id":"ckrpt6wdy000ohkaxc6v32byw"},{"post_id":"ckrpt6wdx000nhkax7bqa9g05","tag_id":"ckrpt6wdp000ahkax68lz1hub","_id":"ckrpt6we1000thkax65eh9os1"},{"post_id":"ckrpt6wdn0007hkaxcpzz4n8k","tag_id":"ckrpt6wds000ghkax7yeea9xk","_id":"ckrpt6we2000uhkax7qwc555j"},{"post_id":"ckrpt6wdz000phkax1o3jgvel","tag_id":"ckrpt6wdp000ahkax68lz1hub","_id":"ckrpt6we4000xhkaxdj7y0lf6"},{"post_id":"ckrpt6wdo0008hkax9pax0y8d","tag_id":"ckrpt6wds000ghkax7yeea9xk","_id":"ckrpt6we50010hkaxh9tbeyh0"},{"post_id":"ckrpt6wdq000chkax8rbqb09m","tag_id":"ckrpt6we2000whkaxga0k81z0","_id":"ckrpt6we60013hkaxc9wi2120"},{"post_id":"ckrpt6wdr000dhkaxdgex4aqs","tag_id":"ckrpt6we2000whkaxga0k81z0","_id":"ckrpt6we70016hkaxedwkavey"},{"post_id":"ckrpt6wdt000hhkaxhqu0e5q6","tag_id":"ckrpt6we70015hkax6tp7ggso","_id":"ckrpt6web001fhkaxea2i2ab8"},{"post_id":"ckrpt6wdt000hhkaxhqu0e5q6","tag_id":"ckrpt6we70018hkax6o0k6k4p","_id":"ckrpt6web001ihkax1s0rfjuj"},{"post_id":"ckrpt6wdt000hhkaxhqu0e5q6","tag_id":"ckrpt6we9001bhkax18infqqw","_id":"ckrpt6wec001khkax0shv9osy"},{"post_id":"ckrpt6wdu000jhkax1c4r973o","tag_id":"ckrpt6we2000whkaxga0k81z0","_id":"ckrpt6wec001mhkax3ys17ouj"}],"Tag":[{"name":"kafka","_id":"ckrpt6wdl0005hkaxf00o0wu5"},{"name":"devops","_id":"ckrpt6wdp000ahkax68lz1hub"},{"name":"服务器","_id":"ckrpt6wds000ghkax7yeea9xk"},{"name":"shell","_id":"ckrpt6we2000whkaxga0k81z0"},{"name":"规范","_id":"ckrpt6we70015hkax6tp7ggso"},{"name":"java","_id":"ckrpt6we70018hkax6o0k6k4p"},{"name":"vue","_id":"ckrpt6we9001bhkax18infqqw"}]}}